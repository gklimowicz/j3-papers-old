
                                                        J3/04-405

Date:      12 October 2004
To:        J3
From:      Van Snyder
Subject:   Interpretation request on type-bound generic interfaces
Reference: J3/04-406

NUMBER: TBD
TITLE:  Multiple identical specific procedures in type-bound generic interfaces
KEYWORDS: Type-bound generics
DEFECT TYPE: Error
STATUS:

QUESTION 1:

Does the following program unit conform to the 2003 standard?

  module M
    type T
    contains
      procedure MyAdd
      generic :: operator(+) => myAdd
    end type T
    type X
    contains
      procedure MyAdd
      generic :: operator(+) => myAdd
    end type X
  contains
    integer function MyAdd ( A, B )
      type(t), intent(in) :: A
      type(x), intent(in) :: B
    end function MyAdd
  end module M

QUESTION 2:

Does the following program unit conform to the 2003 standard?

  module M
    interface operator(+)
      procedure MyAdd
    end interface
    type T
    contains
      procedure MyAdd
      generic :: operator(+) => myAdd
    end type T
  contains
    integer function MyAdd ( A, B )
      type(t), intent(in) :: A
      real, intent(in) :: B
    end function MyAdd
  end module M

QUESTION 3:

If the interface block and type definition are exchanged in QUESTION 2,
does the program unit conform to the 2003 standard?

ANALYSIS:

The OPERATOR(+) bindings to the types T and X construct a single generic
OPERATOR(+) interface that is a local entity of module M.  They do not
construct separate OPERATOR(+) generic interfaces that are separate local
entities of the types.

16.2.3 (Restrictions on generic declarations) specifies that it "contains
the rules that shall be satisfied by every pair of specific procedures
that have the same generic identifier within a scoping unit."

It is clear that if different functions with identical interfaces were
bound to the types that they would be a "pair of specific procedures" and
the resulting OPERATOR(+) interface would therefore be prohibited by
16.2.3.

It is not clear whether the generic bindings bind separate specific
procedures to the OPERATOR(+) generic, or only redundantly bind the same
procedure.  If the former, the program units are not standard conforming
because they violate the provisions of 16.2.3.  If the latter, they
appear to be standard conforming.

C1209 (in 12.3.2.1) prohibits a procedure to be bound to a generic
interface more than once in a scoping unit, but only by way of a
PROCEDURE statement in a generic interface block.  There is nothing
obviously equivalent in 4.5.4, nor anything that specifies that C1209
applies to generic bindings to types.  It also does not apply between a
generic interface block and a generic interface previously specified by a
generic binding to a type (question 3), since the latter specific binding
is accomplished by a conspiracy of a <proc-binding-stmt> and a <generic-
binding>, not by a <procedure-stmt>.

ANSWER 1:

The program units do not conform to the 2003 standard.  It was an
oversight that a constraint equivalent to C1209 was not put into 4.5.4,
and that C1209 was not extended to apply to generic interfaces created by
type bindings.  Edits are provided to correct this oversight.

EDIT 1:

Insert a constraint after C464 in 4.5.4:

"C464a (R452) A <binding-name> shall not specify a procedure that is
       specified previously in any accessible interface with the same
       <generic-spec>."

Remove "<procedure-stmt> in any" from C1209 in 12.3.2.1.

ANSWER 2:

The program units conform to the 2003 standard.  Multiple bindings of the
same procedure to a generic identifier using a <generic-binding> in a
type definition or by a type definition and a generic interface block do
not bind a "pair of specific procedures" to the generic interface.
Indeed, the following type definition is legal:

  type Z
  contains
    procedure :: MyAdd
    generic :: operator(+) => myAdd, operator(+) => myAdd
  end type Z

An edit is provided to clarify this.

EDIT 2:

Insert "distinct" before "specific" in the first sentence of 16.2.3.

ANSWER 3:

The program units conform to the 2003 standard.  Multiple bindings of the
same procedure to a generic identifier using a <generic-binding> in a
type definition or by a type definition and a generic interface block do
not bind a "pair of specific procedures" to the generic interface.
Indeed, the following type definition is legal:

  type Z
  contains
    procedure :: MyAdd
    generic :: operator(+) => myAdd, operator(+) => myAdd
  end type Z

Enforcing C1209 is more bother for processors than simply allowing
multiple bindings of a particular specific procedure to a generic
interface.  It is unhelpful to users, and can be hurtful if the multiple
bindings are specified by independent generic interfaces and brought into
a scoping unit by use association from different modules.  There was no
equivalent constraint in Fortran 90, although something like it was added
by interp F90/000007.  The constraint added there applied only to a
single specification part.  It's not clear whether that meant "declared
in the same specification part" or "accessible in the same specification
part."  When it was put into Fortran 95, it clearly applied to all
accessible generic interfaces with a particular <generic-spec>.  Given
the multitude of new ways to bring specific procedures into a generic
interface in Fortran 2003, and that many of those ways allow a specific
procedure to be bound to a generic identifier more than once, this
conspicuously lonely constraint should be removed.  Edits are supplied to
correct this oversight.

EDIT 3:

Remove C1209 from 12.3.2.1.

Insert "distinct" before "specific" in the first sentence of 16.2.3.

SUBMITTED BY:  Van Snyder
HISTORY:  J3/04-405 m170 submitted
