                                                             J3/13-223

To: J3
From: Van Snyder
Subject: Conditional variables
Date: 2013 December 20
Reference: 04-192, 13-221, 13-222

Title: Conditional variables

Submitted by: Van Snyder

Status: For consideration

Basic functionality: Define syntax to select a variable, depending upon
conditions.

Rationale: Reduces the number of statements, and thereby long-term cost.

There is no way, within a single expression, to select one variable from
a set, other than to give them all the target attribute and invoke a
function that returns a pointer associated with one of them.  A
different function is required for every type, kind, rank, and number of
variables in the set from which a selection is to be drawn.  This does
not work within specification expressions if any of the variables are
optional dummy arguments.

An intrinsic generic solution would be helpful.

Estimated impact: Minor

Markham M6 conformance: Remove simple deficiency.  Although nearly
trivial, it is a new feature.

Detailed specification: Define a <conditional-variable> syntax term.
Proposed spelling:

<conditional-variable> <<is>>
            .IF. <scalar-logical-expr> .THEN. <true-variable>
            [ .ELSEIF. <scalar-logical-expr> .THEN. <true-variable> ]...
            .ELSE. <false-variable> .ENDIF.

When a <conditional-variable> is referenced or defined, the
<scalar-logical-expr>s are evaluated in the order they appear until one
is found to be true, or all have been evaluated.

When a <scalar-logical-expr> is found to be true, expressions within the
corresponding <true-variable> are evaluated, it becomes the variable, no
further <scalar-logical-expr>s are evaluated, and no expressions within
<false-variable> or any other <true-variable> are evaluated.  If no
<scalar-logical-expr> is true, expressions within <false-variable> are
evaluated, its becomes the value of the variable, and no expression
within a <true-variable> is evaluated.  The <true-variable>s and
<false-variable> shall have the same declared type, kind type parameter
values, and rank.  The type and kind type parameter values of the
conditional variable are those of the <true-variable>s and
<false-variable>.  The pointer association status if any, allocation
status if any, dynamic type, shape, and length type parameters of the
result are those of the <true-variable> or <false-variable> that is
selected.

Draft edits: To estimate scope of project

Add an alternative to R602 <variable>

  <<or>> <conditional-variable>

Add syntax rules

R602a <conditional-variable> <<is>>
            .IF. <scalar-logical-expr> .THEN. <true-variable>
            [ .ELSEIF. <scalar-logical-expr> .THEN. <true-variable> ]...
            .ELSE. <false-variable> .ENDIF.

R602b <true-variable>  <<is>> <variable>

R602c <false-variable> <<is>> <variable>

Add a constraint

C602a (R702a) <false-variable> and all <true-variable>s shall have the
      same declared type, kind type parameter values, and rank.

Insert paragraphs 6.2p3 etc after C607 (maybe introduce subclauses 6.2.1
General and 6.2.2 Conditional variables):

"Where a <conditional-variable> is referenced or defined, the
<scalar-logical-expr>s are evaluated in the order they appear until one
is found to be true, or all have been evaluated.

"When a <scalar-logical-expr> is true, expressions within the
corresponding <true-variable> are evaluated, it becomes the variable as
if it were not conditional, no further <scalar-logical-expr>s are
evaluated, and no expressions within <false-variable> or any other
<true-variable> are evaluated.  If no <scalar-logical-expr> is true,
expressions within <false-variable> are evaluated, it becomes the
variable as if it were not conditional, and no expression within a
<true-variable> is evaluated.

The declared type and kind type parameter values of a conditional
variable are those of the <true-variable>s and <false-variable>, and the
pointer association status if any, allocation status if any, dynamic
type, shape, and length type parameter values of the result are those of
the <true-variable> or <false-variable> that is selected."
