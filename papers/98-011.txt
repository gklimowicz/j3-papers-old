

                                                        J3/98-011

Date:        13 Aug 98
To:          J3
From:        R. Maine
Subject:     Editor's list of unresolved issues.

This paper is a list of issues that the editor considers to be
unresolved.  Many of these items are collected from previous
papers, where they were in danger of being lost.  Putting them in
a standing document alleviates this problem.  Items will be
deleted from this list when they are resolved, but the item
numbers will not be re-used.  Items in this list may have
associated J3 internal notes in the document, though currently
many do not.

>From 98-110 (97-007r1 to 98-007)

1. Needs J3 note in 8.4.1.10.

  In 9.4.1.10, I really don't like the change from "Any variable that"
  to "When a variable".  The "when" phraseology implies that the
  attribute is time-dependent, which is not a concept that we have at
  all.  I can buy that it is time-dependent whether a a variable is a
  pending I/O storage affector.  But I don't buy any attributes
  (including ASYNCHRONOUS) being time-dependent.  They are at most
  scoping unit dependent.  Though I don't like this, I did leave it
  alone, as it was a J3-voted change to my previous wording.  (I'm ok
  with the other changes).  See below for more on this.

2. Was 98-110 item 1.  Needs a J3 note.

  I find the wording in the first para of 5.1.2.12 a bit confusing.
  It mixes static and time-dependent concepts, and I think parts of it
  are redundant.  If you are keying off the fact that the variable is
  only an affector while a data transfer statement that references its
  storage units is pending, then it is redundant to also have the
  condition that a data transfer statement be pending - if the
  variable is currently an effector, then one must be.  I think the
  biggest thing here is to more clearly delineate static from
  time-dependent conditions.  My proposed wording is:

      "The base object of variable shall have the
       <<ASYNCHRONOUS attribute>> in a scoping unit if
        (1) the variable appears in an executable statement or
            specification expression in that scoping unit and
            ["in an expression or executable statement"?  your choice]
        (2) any statement of the scoping unit is executed while
            the variable is a pending I/O storage sequence
            effector (9.4.1.10)"

  The biggest point of this wording is that the pending I/O storage
  sequence effector stuff is mentioned in a time context (with
  "while"), but the static characteristics are outside of any
  time-dependent conditional phrases.

  Since there have been a few revisions in this wording already, I
  have *NOT* made this change just on my own, but I commend it to J3's
  (and JOR's) attention for the next revision.

3. Was 98-110 item 3.  Needs a J3 note.

  I don't really think you want to say in 9.4.4(3) that "execution of
  the current data transfer statement is terminated."  Setting the
  value of the IOSTAT variable is specifically identified by the last
  item in this list as part of the execution of a data transfer
  statement.  I don't think you want that skipped.  (Hmm, now that I
  think of such things, why isn't there a subsequent item for possible
  transfer of control to statements identified by end=, err=, or eor=
  specifiers?  That also seems like part of the execution of the
  statement to me).  You probably just want to say that steps 4-8 are
  skipped.  Hmm.  Still thinking of such things, it seems like the
  description of error handling is all messed up here.  We only
  consider errors in one place (the old item 6, new 7)?  What if an
  error occurs in the next step (position file after data transfer)?
  We ignore that?  Or what if one occurs much earlier - say in
  identifying the unit?  We still do file positioning and data
  transfer even when we don't have a unit?  (I suppose you could
  conceptually say that we still do all these things, but that they
  all fail because of the error condition).  I'm going to leave this
  for the J3 or JOR to work on because there can well be real semantic
  content to some of these questions (example - questions of whether
  variables in the i/o list become undefined if we have skipped the
  step of transferring the data as opposed to having an error in it).

4. Was 98-110 item 4.  J3 note in 9.4.1.10.

  Section 5.1.2.12 uses the term "pending I/O storage sequence
  affector" and xrefs 9.4.1.10 for it.  That term is not yet defined
  anywhere (in fact, a grep fails to find the word "affector" anywhere
  else in the document).  This is noted as "edits not available yet"
  for issue 10 in paper 97-262.

5. Was 98-110 item 6.  J3 note in 4.5

  The glossary entries for direct and ultimate components haven't been
  updated to correspond to 4.5.  It has been suggested that the term
  "direct component" might now be superfluous, largely replaced by
  subobject.  It only appears to be used in c14.  I haven't done
  anything on these.  At least the glossary fix should be done.

6. Was 98-110 item 7.  J3 note in 6.1.2.

  The alloc TR needs to be integrated with the f2k definition of
  "subobject."  I've taken a stab at how to do this.  Its not quite
  done.  In particular, I haven't written the standardese in section
  6.1.2 to define this.  I did put a J3 note there somewhat sloppily
  explaining my concept of it.  Some of the other edits here assume
  that concept is adopted.  Otherwise all the uses of "subobject" in
  conjunction with allocatable components will need to be revisted.
  Malcolm and I have talked a bit about this.  He has some other
  approaches that might work better, including an intriguing idea of
  treating allocatable components more like zero-sized arrays than
  like disassociated pointers.  The whole question needs more work.

7. Was 98-110 item 8.  J3 note in 6.3.1.2.

  There are still some inconsistencies between sections 6.3.1.2
  and 6.3.3.1.  For example, 6.3.1.2 fails to include the exception
  for dummy arguments.  I wonder why all this needs to be said
  twice anyway.  I added a J3 note in 6.3.1.2.

8. Was 98-110 item 9.  Needs a J3 note in 9.4.2

  [149:6]  It isn't clear to me that there is any real problem with
  allocatable components in output list items.  This isn't like
  the case of pointers where the pointer inherently looses its semantics
  when written to a file.  For formatted input I can see that there
  would be ambiguities, but I see no problem in formatted output or
  in unformatted i/o.  This is clearly more than an editorial matter.
  There is also obviously nothing wrong with disallowing it.
  I just commend it to J3's attention as a possible extension as
  part of the f2k integration.

9. Was 98-110 item 10.  Needs a J3 note somewhere.

  As a possible f2k integration enhancement, I suggest
  we consider allowing initialization of an object of a derived type
  that has a component that is an allocatable array?  At least allow
  it to be initialized to null()?  This one may have subtleties that I
  don't yet appreciate.  It seems odd that we can initialize something
  with a pointer component, but not something with an allocatable
  component.  Ok, so its redundant because it is implicit anyway.  Why
  not allow it to be explicit?  Are there reasons other than the
  apparent redundancy for disallowing it?  The restriction as currently
  stated disallow things that are not redundant, like initialization
  of objects of derived type that happen to have an allocatable
  component.  This is clearly not an editorial issue.  I commend it
  to J3's attention as a possible enhancement to add during
  integration.

  Related issues include allowing ALLOCATABLE components in
  parameters.

10. Was 98-110 item 11.  Needs a J3 note somewhere.

  This isn't directly related to the TR, but came up while I was
  studying the DTR (and wondering why we couldn't allow PARAMETERS
  with the allocatable attribute as mentioned above).
  I suggest we consider allowing pointers with the parameter
  attribute.  Yes, the only possible value is NULL(), but that happens
  to be useful.  For example, you might want to pass it as an actual
  arg for an intent(in) dummy pointer.  Note that we do allow
  parameters with pointer components (note 5.8 even has an explicit
  example in case anyone has any question), so lets allow the simpler
  case also.  I might argue that this is appropriate as an integration
  issue for intent for pointer dummy args.  A pointer parameter is
  much like an intent(in) argument.

11. Was 98-110 item 12.  Needs a J3 note somewhere.

  I don't like the usage of the terminology "execution of a process"
  in the paragraphs after the new note 15.1.  It seems vague (what
  process?)  and we don't have any technical definition for what "a
  process" means anyway.  But I didn't do anything about it.  In the
  same area, I also question the terminology "a process further to
  those required or permitted by the standard."  Among other things,
  it sounds almost circular - doesn't it essentially say that if the
  standard prohibits something, then that something shall not happen?
  Maybe the interval folk could look at this.  Sounds very simillar
  to some of the questions they raised about when optimization is
  legal, and how to specify such things.

12. Was 98-110 item 13.  Needs a J3 note somewhere.

  Shouldn't 15.9.25 be more specific in that it should inquire whether
  halting can be controlled by IEEE_SET_HALTING_MODE, rather than just
  whether there is some unspecified means of controlling it (like
  a vendor-specific intrinsic, some of which *DO* currently exist,
  so this is not just academic)?  Also, shouldn't IEEE_SET_HALTING_MODE
  have some reference to whether this capability is supported or not?
  What happens if you call IEEE_SET_HALTING_MODE when setting the halting
  mode isn't defined?  Perhaps the INTRINSIC doesn't exist in such a
  case; perhaps it does nothing; perhaps it sets some exception?  I don't
  see any mention of this obvious error condition.  Well, I guess it
  does say under IEEE_SET_HALTING_MODE that "the processor must/shall
  either already be treating this exception this way or be capable of
  changing the mode so that it does."  I suppose that means it is just
  illegal code to call it if you don't know that the processor can do
  it.  But how do you know that?  Presumably from IEEE_SUPPORT_HALTING,
  but I don't see the connection made explicit.  Probably simillar
  questions for what happens when you call other "unsupported" things.
  I haven't taken the time to make a full list.

13. Was 98-110 item 14.  Needs a J3 note somewhere.

  While perusing other things, I noticed that 14.7.5(6) is wrong
  for INTENT(OUT) arguments.  I didn't take the time to fix it
  or to check for simillar problems elsewhere.

14. Was 98-110 item 15.  Needs a J3 note somewhere.

  Section 12.4.1.5 seems to miss several restrictions on pointer
  optional dummy arguments that are not present.  For example, they
  should not be allocated, deallocated, pointer dereferenced (which
  might not always constitute a reference), pointer assigned, or
  nullified.  There might also be simillar omissions for
  allocatable optional dummies.

>From 98-144 (98-007 to 98-007r1)

15. First J3 note in 5.2

  The 2nd constraint after R623 needs explanation.
  Its also not clear that it is right.  Suggestion that
  accessibility should not be prohibitted.

16. Second J3 note in 5.2

  On the required agreement between a procedure declaration and the
  actual procedure.

  You don't want the second constraint (about matching
  characteristics) to be a constraint because it isn't necessarily
  checkable at compile-time.  Well, the point is perhaps arguable,
  but I *SERIOUSLY* doubt that you want it to be inconsistent
  depending solely on the syntax used for declaration (a constraint
  when you use an abstract interface, but not a constraint when
  you use an interface body).  And the constraint doesn't even
  make sense for the dummy argument case.  So I turned it into
  text and made the wording simillar to that in 12.3.2.1.

  Oh, and the third constraint has simillar problems.  It can't be
  a constraint either.

  Hmm.  For that matter, I don't see anything outside of the note 5.20
  that explains what "procedure ()" means at all.  Nor do I see anything
  that explicitly says that "procedure (real)" means an implicit
  interface real function, or that "procedure (some_interface)"
  means a procedure with that interface.  We just have the syntax,
  but we are missing words to say what the syntax means.  Some of
  the cases are fairly obvious, but others are not.  Even for the
  obvious cases, we should say the words instead of hoping that it
  is equally obvious to everyone.  The only words I see have to do
  with whether the entity is a procedure pointer, dummy procedure,
  or external procedure.  But I don't see any words about the interface
  being given to the specified names.

  Being rushed, I haven't written the revised words for these; just
  left a J3 note instead.

16. Third J3 note in 5.2

  There was also a suggestion that the forward reference to section 12 in
  note 5.19 was undesirable.  I haven't done anything about that either.

>From 98-168 (98-007r1 to 98-007r2)

17.  First J3 note in 4.5.3

  The words in the extensible type section say that every extended type
  has an additional component name that is the same name and has the
  same type as its parent type.  How about its "grandparent" etc.?
  If we have an object obj of type x extended from y, which was extended
  from type z, can we say obj%z or do we have to write that as
  obj%y%z?

  Note that cannot automatically deduce that this name is inherited
  because it is components that are inherited and we explicitly say
  that this extra name is not a component.

  I assume that we want to be able to use the simple form, but this
  is a technical rather than an editorial question.  So I've just
  added a J3 note.

  While on the subject, a matter that is more editorial.  I'm slightly
  bothered by refering to something as a component name when it is not
  the name of a component.  I think we should use a different
  terminology here.  Perhaps that it is a subobject name or something
  of the sort.  Added that thought to the J3 note also.

18. Second J3 note in 4.5.3.

  Couldn't we make the restriction about component names not conflicting
  with parent component or type names a constraint?  (After fixup to
  include grandparent type names if we decide to do that).

19. J3 note in 4.5.6

  The description of the nested form of the structure constructor
  refers to the "component" that has the same name as the parent type.
  This contradicts the definition of that name, which says that it
  is not a component.  And this just reinforces my concern about how
  confusing it is to have a "component name" that is not the name of
  a component.  Perhaps we mean subobject name here?

20. J3 note in 7.5.2

  I don't think that the constraint on kind type parameters for pointer
  assignment (7.5.2) is compile-time checkable in polymorphic cases.
  The constraint probably needs to be split into those things checkable
  at compile time (as a constraint) and those things checkable only at
  run time (as a restriction).

  Also, I'm surprised that there are no compile-time constraints at all
  on type when target is polymorphic.  We don't even demand compile-time
  checking that the target and pointer have the same base type.

  As a general problem in several places I'm concerned about the
  integration of pdts with inheritance.  Looks to me like we didn't
  catch nearly all of the areas.  I think that to integrate them
  properly, we are going to have to talk about "type and type
  parameters" together, rather than writing one set of requirements
  about types and then a separate set of requirements about the type
  parameters.

  It has been suggested elsewhere that we come up with terms to
  describe "type and type parameters" or "type and kind type
  parameters".  It might simplify wording some of these things.
  Perhaps we might just suitably modify the definitions of declared
  type and dynamic type.  We may need to modify them a little anyway.
  I don't think we ever quite explicitly said that the declared
  type of a non-polymorphic object type means (though its fairly
  obvious).

21. J3 note in 14.1.2.5

  In paper 98-153, I had made the description of the scoping of
  type parameters almost identical to that of components.  But I
  see that this doesn't quite hold together consistently.

  On studying 14.0, 14.1.2, 14.1.2.5, and 14.1.3, it seems to me that
  components and type parameters are better described as having a
  scope of the derived type definition instead of saying that they
  have "the same scope as the derived type".  I'd then interpret parts
  of section 14.1.2.5 as describing (quite adequately, I think) the
  limited contexts in which these names can be used outside of the
  derived type definition (that is, outside of their scope).

  In fact, I think we are forced to do type parameters this way
  because we need to have them included in the list (14.6.1.3) of
  things that block host association of host entities of the same
  name.  The edits of paper 98-153 added type parameters to that list,
  but that only makes sense if type parameters have a scope of the
  derived type definition.  So I've redescribed the scope of type
  parameters in that manner.  If I've messed this up, let me know.

  I have not changed anything about the way the scoping of components
  is described.  My inclination is that they should indeed be
  described much like I now have type parameters - as having a scope
  of the derived type definition, with limited contexts where they can
  be used outside of this scope.  But simple though this change seems
  in some ways, I'm concerned that there might be subtleties that I'm
  missing, so I'm not going to try to do it without J3 guidance.

  My proposal is just to change "the same scope as the type of which
  it is a parameter" to "the scope of a derived type definition"
  in the first para of 14.1.2.5.

>From mtg 146

22. Needs a J3 note somewhere.

  The IEEE_SUPPORT_* intrinsics in c15 appear to be impossible
  to use portably.  As I interpret them, it is illegal to
  even write the call in the source code unless the data type
  returns true from IEEE_SUPPORT_DATATYPE, which you don't
  know until runtime.  It doesn't look to me like protecting
  these calls with a conditional would make them legal - they
  might fail compilation.

  For the IEEE_SUPPORT_* calls, I'd think it obvious to allow
  them for all real kinds.  There is an obvious value for them
  to return (.false.).  Simillar issues with the other IEEE
  intrinsics, though for many of them, the value to return
  isn't obvious.  Perhaps they should still be legal to write,
  but not to invoke (so that they can be protected by
  conditionals).
