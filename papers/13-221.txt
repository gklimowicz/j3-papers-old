                                                             J3/13-221

To: J3
From: Van Snyder
Subject: Conditional actual arguments
Date: 2013 December 20
Reference: 04-192, 13-222, 13-223

Title: Conditional actual arguments

Submitted by: Van Snyder

Status: For consideration

Basic functionality: Define syntax to select an actual argument, and to
compute whether an actual argument is present, depending upon
conditions.

Rationale: Reduces the need for pointer, target, or allocatable
attributes.  Avoids combinatorial explosion.  Calculating whether an
argument is present should have been done this way instead of 2008
kludge of considering disassociated pointer or deallocated allocatable
as actual argument corresponding to nonpointer nonallocatable optional
argument to be absent, which doesn't work for pointer or allocatable
optional dummy arguments.

Estimated impact: Minor

Markham M6 conformance: We should have done it this way in the first
place.  Avoid combinatorial explosion.

Detailed specification: Define a <conditional-argument> syntax term as
an actual argument.  Proposed spelling:

<conditional-argument> <<is>>
            .IF. <scalar-logical-expr> .THEN. <true-argument>
            [ .ELSEIF. <scalar-logical-expr> .THEN. <true-argument> ]...
            [ .ELSE. <false-argument> ] .ENDIF.

When a <conditional-argument> is an actual argument, the
<scalar-logical-expr>s are evaluated in the order they appear until one
is found to be true, or all have been evaluated.

When a <scalar-logical-expr> is true, no further <scalar-logical-expr>s
are evaluated, expressions within the corresponding <true-argument> are
evaluated, the <true-argument> becomes the actual argument of the
procedure being referenced as if it were not conditional, no further
<scalar-logical-expr> is evaluated, and expressions within the
<false-argument> or other <true-argument>s are not evaluated.

If no <scalar-logical-expr> is true, no expression within a
<true-argument> is evaluated.  If .ELSE. <false-argument> appears,
expressions within <false-argument> are evaluated, the <false-argument>
becomes the actual argument of the procedure being referenced as if it
were not conditional, and expressions within <true-argument>s are not
evaluated.

If no <scalar-logical-expr> is true and <false-argument> does not
appear, the actual argument is absent.

If the <false-argument> and <true-argument>s are data objects, the
declared type, kind type parameter values, and rank of the
<conditional-argument> are those of the <false-argument> and
<true-argument>s.  The argument presence, pointer association status if
any, allocation status if any, dynamic type, shape, and length type
parameter values of the actual argument are those of the <true-argument>
corresponding to the first true <scalar-logical-expr>, if there is one,
or otherwise those of the <false-argument> if it appears.

The properties of the <false-argument> and <true-argument>s shall agree
with the dummy argument in the same way as if they were not
conditional.

Draft edits: To estimate scope of project

Insert syntax rules

R1222a <actual-arg> <<is>> <actual-argument>
                    <<or>> <conditional-argument>

R1222b <conditional-argument> <<is>>
            .IF. <scalar-logical-expr> .THEN. <true-argument>
            [ .ELSEIF. <scalar-logical-expr> .THEN. <true-argument> ]...
            [ .ELSE. <false-argument> ] .ENDIF.

R1222c <true-argument> <<is>> <actual-argument>

R1222d <false-argument> <<is>> <actual-argument>

Rename R1223 as <actual-argument>

Insert a constraint

C1233a (R1222b) The <false-argument> and <true-argument>s shall all be
       data entities with the same declared type, kind type parameter
       values, and rank, \obs{all be <alt-return-spec>s,} or all be
       procedures.

Insert paragraphs 12.5.1p2 etc. after C1237:

"When a <conditional-argument> is an actual argument, the
<scalar-logical-expr>s are evaluated in the order they appear until one
is found to be true, or all have been evaluated.

When a <scalar-logical-expr> is found to be true, expressions within the
corresponding <true-argument> are evaluated, the <true-argument> becomes
the actual argument of the procedure being referenced as if it were not
conditional, no further <scalar-logical-expr> is evaluated, and
expressions within the <false-argument> or another <true-argument> are
not evaluated.

If no <scalar-logical-expr> is true, no expression within a
<true-argument> is evaluated.  If .ELSE. <false-argument> appears,
expressions within <false-argument> are evaluated, the <false-argument>
becomes the actual argument of the procedure being referenced as if it
were not conditional, and no expression within a <true-argument> is
evaluated.

If no <scalar-logical-expr> is true and <false-argument> does not
appear, the actual argument is absent.

If the <false-argument> and <true-argument>s are data objects, the
declared type, kind type parameter values, and rank of the
<conditional-argument> are those of the <false-argument> and
<true-argument>s.  The argument presence, pointer association status if
any, allocation status if any, dynamic type, shape, and length type
parameter values of the actual argument are those of the <true-argument>
corresponding to the first true <scalar-logical-expr>, if there is one,
or otherwise those of the <false-argument> if it appears.

The properties of the <false-argument> and <true-argument>s shall agree
with the dummy argument in the same way as if they were not
conditional."
