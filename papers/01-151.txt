
                                                       J3/01-151

Date:    3 March 2001
To:      J3
From:    John Reid
Subject: Interpretations 2, 11, 23, JP-06

I have been looking through the interpretations (N1427) to see what more
work is needed. As far as I can see, items 2, 11, 23, and JP-06
already have draft responses ready for consideration by J3. For your
convenience, here are copies.

----------------------------------------------------------------------

NUMBER: 000002
TITLE: Free source form requirement for blank in PRINT statement
KEYWORDS: Free source form, PRINT, blank
DEFECT TYPE: Interpretation
STATUS: J3 consideration in progress

QUESTION:

Consider the following PRINT statement form:    PRINT"(I5)",5

Section 3.3.1 of the Fortran 95 standard states:

  A blank shall be used to separate names, constants, or labels from adjacent
  keywords, names, constants, or labels.

  NOTE 3.3
  For example, the blank[s] after ... READ ... [is] required in the following:

  ...
  READ 10
  ...

Although the sentence preceding R420 is somewhat confusing in that it uses the
phrase "a sequence of characters, DELIMITED by either apostrophes or quotation
marks", the syntax rule itself is clear that the " or ' delimiting characters
are part of the <char-literal-constant> syntax.  The first sentence on the top
of page 36 then clarifies that although the delimiter characters are a part of
the syntax, they are not a part of the value.

Section 3.2 makes it clear that a character literal constant is a token.
Section 3.2.5 describes delimiters but does not include either " or ' because
it is describing delimiters for lists.

Thus, it seems clear that in free source form a blank is required between the
keyword PRINT and the character literal constant containing the format list but
there is also some disagreement on this point among existing Fortran
processors.

(1) In free source form, is a blank required between the keyword PRINT and the
    character literal constant containing the format specification?

(2) Also, for clarification, in free source form, is a blank required between
    the keyword PRINT and the asterisk that represents the list-directed output
    specifier?

ANSWER:

(1)  Yes.  The analysis in the QUESTION is correct.  Since PRINT is a keyword,
     when the format specification is a character literal constant, the blank
     is required between the keyword PRINT and the format specifier.

(2)  No.  Since PRINT is a keyword, according to the cited rule in 3.3.1, the
     asterisk would have to be a name, a constant, or a label in order for a
     blank to be required to separate PRINT from the asterisk.  By 3.2.1, an
     asterisk is not a name.  By 3.2.2, an asterisk is not a constant.  And by
     3.2.4, an asterisk is not a statement label.  Yes, an asterisk may be used
     as a dummy argument alternate return specifier representing a statement
     label but that usage is irrelevant to the PRINT statement.  Therefore,
     since an asterisk is none of the three items that must be separated from
     PRINT by a blank, the blank is not  required.

EDITS:  None.

SUBMITTED BY:  Larry Rolison / Dick Hendrickson
HISTORY:  J3/97-238 M143 submitted

----------------------------------------------------------------------

NUMBER: 000011
TITLE: G editing typo
KEYWORDS: G edit descriptor
DEFECT TYPE: erratum
STATUS: J3 consideration in progress

In F95 section 10.5.4.1.2, the last line of the table shows an equivalent
conversion of F(w-n).1,n('b').  This is different from the corresponding table
in F90, which shows this conversion as F(w-n).0,n('b').  There is no obvious
reason for this change; it appears to be a typo in f95.

Should this conversion be F(w-n).0,n('b') as in Fortran 90?

ANSWER:

Yes, this was a typographical error in f95.

EDIT:

[171:23] Last line of the table in 10.5.4.1.2.  Change ".1" to ".0"

SUBMITTED BY: Richard Maine
HISTORY: 97-225 m143 submitted Aug. 12, 1997

----------------------------------------------------------------------

NUMBER: 000023
TITLE: Termination of the previous record by a WRITE statement
KEYWORDS:
DEFECT TYPE:
STATUS: J3 consideration in progress

QUESTION:

Suppose a sequential formatted file is positioned within a record as a result
of a nonadvancing READ.

1. If the next operation performed on the file is a WRITE, can the current
   record be terminated at its current position before the next record is
   written?  Section 9.2.1.3.2 appears to preclude the record from being
   terminated, but at least one Fortran 90 implementation does the record in
   such an instance.

2. If next operation is a nonadvancing WRITE and the number of characters
   written does not extend to the end of the current record, are the remaining
   characters at the end of the record preserved?

ANSWER:

1.      No.  If the current record were to be terminated, the file position would
be changed.  Section 9.2.1.3.2 [136:37-39] states: "For sequential access on
input, if there is a current record, the file position is not changed.
Otherwise, the file is positioned at the beginning of the next record and this
record becomes the current record."

2.      No, the remaining characters in the record are not preserved.  The
characters are inaccessible.   An edit to section 9.2.1.3.2 to clarify the
situation is given below.

EDIT: [136:44] Change "record becomes" to "record, excluding any data
beyond the current point, becomes"

SUBMITTED BY: Robert Corbett
HISTORY:  98-155   m145 Submitted (part 1)
          WG5/N1410     Draft answer

----------------------------------------------------------------------

NUMBER: JP-06
TITLE: Type declaration statements
KEYWORDS:
DEFECT TYPE:
STATUS: J3 consideration in progress

QUESTION:
JP-6)
  5.1 Type declaration statements

  As for the 16th and 19th constraint after R506:

  the 16th:
  "Constraint: The function-name shall be the name of an external
   function, an intrinsic function, a function dummy procedure, or a
   statement function."

  Because the syntactic class `object-name' is only defined as a
  `name' in the standard, the following constraint should be added here:
  Constraint: The object-name shall be the name of a data object.

  After that, in the 19th:
  "Constraint: initialization shall not appear if object-name is dummy
   argument, a dummy argument, a function result, an object in a named
   common block unless the type declaration is in a block data program
   unit, an object in blank common, an allocatable array, an external
   name, an intrinsic name, or an automatic object."

  In the above, `a function result,' should be removed.

  If we can not add the constraint above, `a statement function' should
  be added in the 19th constraint.

DISCUSSION:  There is a typographical error in the quoted 19th
constraint in the question in that "dummy argument" appears twice.

ANSWER:    Agreed.
EDIT:      [48:26+] Add:
           "Constraint: The object-name shall be the name of a data object."
           [48:31] Delete "a function result,".

SUBMITTED BY: Japan
HISTORY: 99-208 Submitted
         99-221 Classed as Fortran 95 Interpretation.
         WG5-N1411 draft answer
