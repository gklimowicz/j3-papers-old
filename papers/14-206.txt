                                                            J3/14-206
To: J3
From: Malcolm Cohen
Subject: Editorial fix (not an interp)
Date: 2014 June 25


1. Introduction

This paper contains an editorial fix for a minor glitch in the wording.
In "Events that cause variables to become defined", we have

(23) Invocation of a procedure that contains an unsaved nonpointer
     nonallocatable local variable causes all nonpointer
     default-initialized subcomponents of the object to become defined.

and

(25) Invocation of a nonpointer function of a derived type causes all
     nonpointer default-initialized subcomponents of the function result to
     become defined.

Since a function result that is not a procedure pointer is a local
variable, item (23) already covers what item (25) says, but they are
different.  Item (25) omits the case of ALLOCATABLE, i.e.

  TYPE T
    REAL :: C = 1.5
  END TYPE
  ...
  FUNCTION F()
    TYPE(T),ALLOCATABLE :: F
    ! Item (23) says nothing, but
    ! Item (25) says that F%C is defined with the value 1.5.

This is obviously contradictory nonsense, since text elsewhere says F is
unallocated and therefore F%C is undefined.

So item (25) is both correct and not redundant, unfortunately where it is
correct it is redundant and where it is not redundant it is not correct.


2. Edits to 14-007r1

[475:19-20] 16.6.5 Events that cause variables to become defined, p1,
            Delete item (25) "Invocation of a nonpointer .. defined.".

===END===
