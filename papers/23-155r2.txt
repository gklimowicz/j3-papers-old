To: J3                                                     J3/23-155r2
From: T. Clune & generics
Subject: Formal syntax for generics
Date: 2023-June-16

Reference: 22-120r5, 22-151r3, 22-154r5, 23-007

This is still a work in process, but the basic approach appears to be
sound.


1. Introduction
===============

This paper contains the syntax for generic programming features.
Section 2 contains a succinct, non-pedagogical example that exercises
most of the proposed syntax.  Section 3 provides the formal syntax and
is further broken into the following subsections:

  3.1 Deferred entities
  3.1.1 Syntax for deferred arguments
  3.1.2 Deferred interface body
  3.1.3 Active specification of deferred arguments
  3.1.4 Deferred argument association

  3.2 Syntax for the REQUIREMENT construct

  3.3 Syntax for the REQUIRES statement

  3.4 Syntax for the TEMPLATE construct
  3.4.1 Template specification part
  3.4.2 Template subprogram part
  3.4.3 Additional constraint

  3.5 Syntax for the INSTANTIATE statement

Section 4 summarized miscellaneous related changes needed in other
sections of the standard.

2. Example
==========

MODULE A

   REQUIREMENT R(T,F)
      TYPE, DEFERRED :: T
      FUNCTION F(x, i) RESULT(y)
         TYPE(T) :: y
         TYPE(T), INTENT(IN) :: x
         INTEGER, INTENT(IN) :: i
      END FUNCTION F
   END REQUIREMENT R

   TEMPLATE B(T,F,C)
      REQUIRES R(T,F)            ! provides interface for deferred F
      TYPE, DEFERRED :: T        ! redundant decl of deferred type T
      INTEGER, CONSTANT :: C(..) ! deferred rank constant
   CONTAINS
      SUBROUTINE SUB1(x)
         TYPE(T), INTENT(INOUT) :: x
         x = F(x, SUM(C))
      END SUBROUTINE SUB1
      SUBROUTINE SUB2(x)
         TYPE(T), INTENT(INOUT) :: x
         x = F(x, MAXVAL(C))
      END SUBROUTINE SUB2
   END TEMPLATE B

END MODULE A

MODULE B
  USE MODULE A

  INSTANTIATE B(REAL, OPERATOR(*), [3,4]), ONLY: &
              & tot_sub1 => sub1
  INSTANTIATE B(REAL, OPERATOR(+), [3,4]), ONLY: & ! different instance
              & max_sub1 => sub2

CONTAINS

   SUBROUTINE DO_SOMETHING(x)
      REAL, INTENT(INOUT) :: x

      x = 2.
      CALL tot_sub(x)
      PRINT*,'TOT: ', x ! expect 2. * (3+4) = 14.

      x = 3.
      CALL max_sub(x)
      PRINT*,'MAX: ', x ! expect 3. + max(3,4) = 7.

   END SUBROUTINE DO_SOMETHING

END MODULE B


3. Formal Syntax
================

3.1 Deferred entities
--------------------

A deferred argument is an entity that takes some of its
characteristics from its ultimate instantiation argument.  A deferred
argument can be a constant, type, or procedure and can appear in a
REQUIREMENT or TEMPLATE construct (3.2, 3.4).  Association with
instantiation arguments occurs in the REQUIRES and INSTANTIATE
statements.

A deferred constant is a deferred argument that can appear in constant
expressions within a REQUIREMENT or TEMPLATE construct.

A deferred type is a deferred argument that can appear as a <type-spec>
within a REQUIREMENT or TEMPLATE construct.

A deferred procedure is a deferred argument that can appear in
procedure references within a REQUIREMENT or TEMPLATE construct.  A
deferred procedure's interface shall be established by that
REQUIREMENT or TEMPLATE construct, possibly in terms of deferred types
and constants.

An explicit specification of a <deferred-arg> is either
<deferred-arg-explicit-stmt> or <deferred-interface-body>.

A <deferred-arg> shall have one or more ultimate specifications.  An
ultimate specification for a <deferred-arg> is either an explicit
specification or the ultimate specification of a requirement
referenced in a REQUIRES statement.

Note: The approach here is that each deferred argument is always
      eventually explicitly declared at some level of nesting of
      requirements.  Any given deferred argument must have at least
      one ultimate specification and may have multiple.  All must have
      a well-defined active specification which will be defined in
      section 3.1.3.


3.1.1 Syntax for deferred arguments
-----------------------------------

A deferred argument declaration construct is used to declare
REQUIREMENT or TEMPLATE arguments.

<deferred-arg> <<is>> <deferred-arg-name>

Constraint: A <deferred-arg> shall have at most one explicit
            specification in a given scoping unit.

Constraint: A <deferred-arg> declaration shall not have an
            <access-spec> nor shall it appear in a PUBLIC statement.

Note: Deferred arguments are local identifiers and are not externally
      accessible.`


<deferred-arg-decl-stmt> <<is>> <deferred-arg-explicit-stmt>
                         <<or>> <requires-stmt>

<deferred-arg-explicit-stmt> <<is>> <deferred-const-declaration-stmt>
                             <<or>> <deferred-proc-declaration-stmt>
                             <<or>> <deferred-type-declaration-stmt>

Constraint: Each <deferred-arg> shall appear in at most one
            <deferred-arg-explicit-stmt>.

Constraint: If any ultimate specification of a <deferred-arg> is a
            <deferred-const> then all of the ultimate specifications of
            that <deferred-arg> shall be <deferred-const>.

Constraint: If any ultimate specification of a <deferred-arg> is a
            <deferred-proc> then all of the ultimate specifications of
            that <deferred-arg> shall be <deferred-proc>.

Constraint: If any ultimate specification of a <deferred-arg> is a
            <deferred-type> then all of the ultimate specifications of
            that <deferred-arg> shall be <deferred-type>.

Note: Technically the previous 3 constraints are implied by the first
      constraint in section 3.1.3.


3.1.1.1 Syntax for deferred constants

<deferred-const-declaration-stmt> <<is>>
           <declaration-type-spec>, <deferred-const-attr-spec> ::
           <deferred-const-entity-decl-list>

<deferred-const-attr-spec> <<is>> [<deferred-attr-spec>,]...
                                      CONSTANT
                                      [,<deferred-attr-spec>]...

<deferred-attr-spec> <<is>> <dimension-spec>
                     <<or>> <rank-clause>

Constraint: An entity declared in <deferred-const-declaration-stmt>
            shall be INTEGER, LOGICAL, or assumed-length CHARACTER.

Note: For now, we explicitly disallow fixed-length character deferred
      arguments.  Partly this is to not prejudice further work on
      deferred arguments with length type parameters.

<deferred-const-entity-decl> <<is>> <deferred-const> [ ( <array-spec> ) ]

Constraint: If <array-spec> appears in
            <deferred-const-declaration-stmt>, it shall be
            <implied-shape-spec>, <assumed-or-deferred-rank-spec>,
            <explicit-shape-spec-list>, or
            <explicit-shape-bounds-spec>.

Constraint: If <implied-shape-spec>, <explicit-shape-spec> or
            <explicit-shape-bounds-spec> appears in
            <deferred-const-declaration-stmt>, then <lower-bound>
            shall not be specified.

Constraint: If <explicit-shape-bounds-spec> appears in
            <deferred-const-declaration-stmt>, then
            <explicit-bounds-expr> shall not appear as a lower bound.


<deferred-const> <<is>> <name>

Constraint: Each <deferred-const> shall appear in <deferred-arg-list>
            of the innermost scoping unit.

A <deferred-const> is a deferred constant.

Some examples of declaring deferred constants are as follows.

    ! explicit shape
    integer, constant  :: x1
    integer, constant  :: x2(3)
    integer, parameter :: v1(2) = [5,15] ! not a deferred constant
    integer, constant  :: x3(v1)

    ! implied shape
    integer, constant :: x7(*)
    integer, constant :: x9(*,*)
    integer, constant, rank(2) :: x13

    ! assumed-or-deferred-rank-spec
    integer, constant :: x14(..)

3.1.1.2 Syntax for deferred procedures

<deferred-proc-declaration-stmt> <<is>>
     PROCEDURE[(<interface>)] :: <deferred-proc-list>

<deferred-proc> <<is>> <name>

Constraint: Each <deferred-proc> that appears in a
            <deferred-proc-declaration-stmt> shall appear in
            <deferred-arg-list> of the innermost scoping unit.

Constraint: Each <deferred-proc> shall appear in a
            <deferred-arg-decl-stmt> or as a <function-name> or
            <subroutine-name> within an <interface-body> or a
            <deferred-interface-body>.

A <deferred-proc> is a deferred procedure.  A <deferred-arg> that
appears as the <function-name> or <subroutine-name> in an
<interface-body> or a <deferred-interface-body> is a deferred
procedure.

3.1.1.3 Syntax for deferred types

<deferred-type-declaration-stmt>
       <<is>>  TYPE, DEFERRED :: <deferred-type-list>

<deferred-type> <<is>> <name>

Constraint: A <deferred-type> entity shall not appear as
            <parent-type-name> in an EXTENDS attribute.

Note: Possibly a similar constraint is needed for CLASS(T), but
      current reading of the standard requires CLASS(<derived-type-spec>),
      and a <deferred-type> is not a <derived-type-spec>.

Constraint: Each <deferred-type> shall appear in
            <deferred-arg-list> of the innermost scoping unit.

A <deferred-type> is a deferred type.


3.1.2 Deferred interface body
-----------------------------

A <deferred-interface-body> is a deferred interface body and declares
a <deferred-arg-name> as a deferred procedure as well as defining the
interface of that deferred procedure.


<deferred-interface-body>
      <<is>> <function-stmt>
                [ <deferred-interface-specification-part> ]
                <end-function-stmt>
      <<or>> <subroutine-stmt>
                [ <deferred-interface-specification-part> ]
                <end-subroutine-stmt>

Constraint: Each <function-name> and <subroutine-name> in a
            <deferred-interface-body> shall be a
            <deferred-arg-name> in the innermost scope.

<deferred-interface-specification-part>
          <<is>> [ <use-stmt> ] ...
                 [ <deferred-interface-declaration-stmt> ] ...

<deferred-interface-declaration-stmt>
          <<is>> <deferred-proc-declaration-stmt>
          <<or>> <deferred-interface-type-declaration-stmt>
          <<or>> <deferred-other-specification-stmt>

<deferred-other-specification-stmt>
        <<is>> <allocatable-stmt>
        <<or>> <asynchronous-stmt>
        <<or>> <codimension-stmt>
        <<or>> <contiguous-stmt>
        <<or>> <dimension-stmt>
        <<or>> <intent-stmt>
        <<or>> <optional-stmt>
        <<or>> <parameter-stmt>
        <<or>> <pointer-stmt>
        <<or>> <target-stmt>
        <<or>> <value-stmt>
        <<or>> <volatile-stmt>

<deferred-interface-type-declaration-stmt>
          <<is>> <declaration-type-spec>
                 [ [ , <deferred-interface-attr-spec> ] ... :: ]
                 <entity-decl-list>

<deferred-interface-attr-spec>
        <<is>> ALLOCATABLE
        <<or>> ASYNCHRONOUS
        <<or>> CODIMENSION <lbracket> <coarray-spec> <rbracket>
        <<or>> CONTIGUOUS
        <<or>> DIMENSION ( <array-spec> )
        <<or>> INTENT ( <intent-spec> )
        <<or>> OPTIONAL
        <<or>> PARAMETER
        <<or>> POINTER
        <<or>> <rank-clause>
        <<or>> TARGET
        <<or>> VALUE
        <<or>> VOLATILE

A <deferred-interface-body> is a scoping unit that has use and host
association.


3.1.3 Active specification of deferred arguments
------------------------------------------------

The active specification of a <deferred-arg> in each scope is the
intersection of the ultimate specifications of that <deferred-arg>.
An active specification is either well-defined or is inconsistent.

Constraint: The active specification of a <deferred-arg> shall be
            well-defined.

A <deferred-arg> shall only be referenced within a template or a
requirement in a way that is consistent with its active specification.

If a <deferred-arg> has a single ultimate specification, its active
specification is that specification.

If all ultimate specifications of a <deferred-arg> are
<deferred-const> then the active specification is a deferred constant,
otherwise it is inconsistent.

If all ultimate specifications of a <deferred-arg> are <deferred-type>
then the active specification is a deferred type, otherwise it is
inconsistent.

If all ultimate specifications of a <deferred-arg> are <deferred-proc>
then the active specification is a deferred procedure, otherwise it is
inconsistent.


3.1.3.1 Active specification of deferred constants

If two ultimate specifications of a <deferred-const> have types T1 and
T2 respectively, then their active specification is of type T1 if T1
and T2 are the same type.  Otherwise it is inconsistent.

If the active specification of two ultimate specifications is of type
character, then both shall have assumed-length and the active
specification is an assumed-length character.  Otherwise it is
inconsistent.

If two ultimate specifications of a <deferred-const> have kinds K1 and
K2 respectively, then their active specification is of kind K1 if K1
and K2 are the same kind.  Otherwise it is inconsistent.

If two ultimate specifications of a <deferred-const> have ranks R1 and
R2 then:

  - if R1 and R2 are defined ranks, then their active specification is
    of rank R1 if R1 and R2 are the same, otherwise the active
    specification is inconsistent.

  - if one of R1 and R2 is deferred rank and the other has defined
    rank R, then the active specification is R.

  - if both R1 and R2 are deferred rank, then the active specification
    has deferred rank.

If two ultimate specifications of a <deferred-const> have shapes S1 and
S2, then:

  - if S1 and S2 both have explicit shapes then their active
    specification has shape S1 if S1 and S2 are the same.  Otherwise
    it is inconsistent.

  - if one of S1 and S2 is of assumed-shape and the other has explicit
    shape S, then the active specification has shape S.

  - if S1 and S2 are both assumed-shape, then their active
    specification has assumed-shape.


3.1.3.2 Active specification of deferred procedures

If two ultimate specifications of <deferred-proc> are subroutines, then
the active specification is a subroutine.  If two ultimate
specifications of a <deferred-proc> are functions then the active
specification is a function.  Otherwise, they are inconsistent.

If at least one of two ultimate specifications of a <deferred-proc>
is simple, then the active specification is simple.

If at least one of two ultimate specifications of a <deferred-proc> is
pure and the other is not simple, then the active specification is
pure.

If at least one of two ultimate specifications of a <deferred-proc>
is elemental, then the active specification is elemental.

If two ultimate specifications of a <deferred-proc> have the same
characteristics of their dummy arguments then the active specification
has the same characteristics of its dummy arguments.  Otherwise it is
inconsistent.

If two ultimate specifications of a <deferred-proc> that is a function
have the same characteristics for their results then the active
specification has the same characteristics of its result.  Otherwise
it is inconsistent.

The active specification of a <deferred-proc> does not define the
names of its dummy arguments.


3.1.4 Deferred argument association
-----------------------------------

Instantiation arguments are specified by either an INSTANTIATE or a
REQUIRES statement.

<instantiation-arg-spec> <<is>>
        [ <keyword> = ] <instantiation-arg>

Constraint: Each <keyword> shall be the name of a <deferred-arg> in
            the referenced requirement or template.

In the absence of an argument keyword, an instantiation argument
corresponds to the deferred argument occupying the corresponding
position in <deferred-arg-list>; that is, the first instantiation
argument corresponds to the first deferred argument in the
reduced list, the second instantiation argument corresponds to the
second deferred argument in the reduced list, etc.

<instantiation-arg> <<is>> <constant-expr>
                    <<or>> <type-spec>
                    <<or>> <generic-spec>
                    <<or>> <procedure-name>


3.1.4.1 Deferred constant association

Constraint: <constant-expr> shall be type INTEGER, LOGICAL or
            CHARACTER.

Constraint: An <instantiation-arg> that is a <constant-expr> shall
            correspond to a <deferred-arg> that has an active
            specification that is a <deferred-const> in the referenced
            template or requirement.

Constraint: The type and kind of an <instantiation-arg> that is a
            <constant-expr> shall have the same type and kind as the
            active specification of the corresponding <deferred-const>
            in the referenced template or requirement.

Constraint: If the shape of the active specification of the
            corresponding <deferred-const> in the referenced template
            or requirement is not assumed, then <constant-expr> shall
            have the same shape.

Constraint: If the rank of the active specification of the corresponding
            <deferred-const> in the referenced template or requirement
            is not assumed, then <constant-expr> shall have the same
            rank.


3.1.4.2 Deferred procedure association

Constraint: An <instantiation-arg> that is a <generic-spec> or
            <procedure-name> shall correspond to a <deferred-arg> that
            has an active specification that is a <deferred-proc> in
            the referenced template or requirement.

Constraint: An <instantiation-arg> that is a <procedure-name> shall
            have the same characteristics as the active specification
            of the corresponding <deferred-proc> in the referenced
            template or requirement, except that a pure instantiation
            argument may be associated with a deferred argument that
            is not pure, a simple instantiation argument may be
            associated with a deferred argument that is not simple,
            and an elemental instantiation argument may be associated
            with a deferred procedure that is not elemental.

Constraint: An <instantiation-arg> that is a <generic-spec> shall have
            one specific procedure that has the same characteristics
            as the active specification of the corresponding
            <deferred-proc> in the referenced template or requirement,
            except that a pure instantiation argument may be
            associated with a deferred argument that is not pure, a
            simple instantiation argument may be associated with a
            deferred argument that is not simple, and an elemental
            instantiation argument may be associated with a deferred
            procedure that is not elemental.

The <deferred-proc> is associated with the specific procedure that is
consistent with the characteristics.

Note: The previous two constraints constitute what is referred to as
      "weak constraints" in other languages.


3.1.4.3 Deferred type association

Constraint: An <instantiation-arg> that is a <type-spec> shall
            correspond to a <deferred-arg> that has an active
            specification that is a <deferred-type> in the
            referenced template or requirement.

Constraint: If an <instantiation-arg> is a <derived-type-spec>, it
            shall be allowed for a variable of that type to appear in
            a variable definition context.

Constraint: A <derived-type-spec> shall only appear as an
            instantiation argument if a variable of that type is
            permitted in an allocate statement.

Constraint: If an <instantiation-arg> is a <type-spec>, it shall not
            specify a type that has a coarray potential subobject
            component.


3.2 Syntax for the REQUIREMENT construct
----------------------------------------

A REQUIREMENT is a named collection of deferred argument declarations
intended to facilitate reuse of common patterns within templates and
other requirements.

<requirement>
      <<is>> REQUIREMENT <requirement-name> ( [<deferred-arg-list>] )
                [ <use-stmt> ] ...
                <requirement-specification-construct> ...
             END [REQUIREMENT [<requirement-name>]]

<requirement-specification-construct>
        <<is>> <deferred-arg-decl-stmt>
        <<or>> <deferred-interface-body>

Constraint: Each <deferred-arg> shall appear in a
            <requirement-specification-construct>.

Constraint: If a <requirement-name> appears in the <end-requirement-stmt>,
            it shall be identical to the <requirement-name>
            specified in the <requirement-stmt>.

Note: A <requirement> is a scoping unit that allows use and host
      association.

Note: Each <deferred-arg> is local to the REQUIREMENT construct.


3.3 Syntax for the REQUIRES statement
-------------------------------------

A REQUIRES statement provides declarations of deferred arguments by
associating them with the deferred arguments of a REQUIREMENT.

<requires-stmt> <<is>>
      REQUIRES [::] <requirement-name>
            ( [<instantiation-arg-spec-list>] )

Constraint: <requirement-name> shall be the name of a previously
            defined <requirement>.


3.4 Syntax for the TEMPLATE construct
-------------------------------------

A template is a set of declarations, specifications and definitions
that are enabled by instantiation.  A TEMPLATE construct defines a
template.  A template is a scoping unit to which use and host
association and template argument association can be applied.  A
template can be defined in the specification section of a program unit
other than a block data program unit.

<template> <<is>> <template-stmt>
                      [ <template-specification-part> ]
                      [ <template-subprogram-part> ]
                      <end-template-stmt>

<template-stmt> <<is>> TEMPLATE <template-name> ([<deferred-arg-list>])

<end-template-stmt> <<is>>  END [TEMPLATE [<template-name>]]

Constraint: If a <template-name> appears in the <end-template-stmt>,
            it shall be identical to the <template-name>
            specified in the <template-stmt>.

3.4.1 Template specification part
---------------------------------

<template-specification-part> <<is>>
            [ use-stmt ] ...
            [ <template-declaration-construct> ] ...

The implicit mapping within <template> is as if
       IMPLICIT NONE(TYPE,EXTERNAL)
is in place.

<template-declaration-construct> <<is>> <template-specification-construct>
                                 <<or>> <deferred-arg-decl-stmt>
                                 <<or>> <requirement>
                                 <<or>> <template>
                                 <<or>> <interface-block>

<template-specification-construct>
                      <<is>> <access-stmt>
                      <<or>> <derived-type-def>
                      <<or>> <dimension-stmt>
                      <<or>> <enum-def>
                      <<or>> <enumeration-type-def>
                      <<or>> <generic-stmt>
                      <<or>> <instantiate-stmt>
                      <<or>> <intrinsic-stmt>
                      <<or>> <parameter-stmt>
                      <<or>> <type-declaration-stmt>

Note: The analogous construct for MODULE is divided into two separate
      constructs: <specific-construct> and
      <other-specification-construct>.  However, subgroup does not see
      the criteria by which items were assigned to either construct.
      Further since TEMPLATE admits fewer items, we have decided to
      merge these two constructs.

Note: A DATA, FORMAT, ENTRY or statement function statement shall not
      appear in the template specification part.

Note: An ALLOCATABLE, ASYNCHRONOUS, BIND, CODIMENSION, CONTIGUOUS,
      EXTERNAL, INTENT, NAMELIST, OPTIONAL, POINTER, PROTECTED, SAVE,
      TARGET, VOLATILE, VALUE, COMMON, or EQUIVALENCE statement shall
      not appear in the template specification part.

Constraint: An entity declared by <type-declaration-stmt> shall have
            the PARAMETER attribute.

Note: This is to say, the template specification section cannot
      declare variables.


3.4.2 Template subprogram part
------------------------------

<template-subprogram-part> <<is>> <contains-stmt>
                                     [ <template-subprogram> ] ...

<template-subprogram> <<is>> <function-subprogram>
                      <<or>> <subroutine-subprogram>

Constraint: A variable or procedure pointer declared in
            a <template-subprogram-part> shall not have the SAVE
            attribute.

Note: If variables were permitted to have the SAVE attribute then
      instantiations of the template with the same instantiation
      arguments could unintentionally modify each other's values.

Constraint: EQUIVALENCE and COMMON shall not appear in a
            <template-subprogram-part>.

Note: Allowing COMMON statements within a template is a concern even
      when they lack the SAVE attribute.  Namely, if any elements of a
      common block are of deferred then the memory footprint of a common
      cannot be determined at compilation.

Note: Allowing EQUIVALENCE statements inside a template seems to be ok,
      but subgroup is concerned that there may be corner cases that we are
      not realizing, and would prefer to disallow.


3.4.3 Additional constraint
---------------------------

Constraint: <template> shall only reference intrinsic procedures,
            procedures with explicit interfaces, and operators.

Note: This constraint expresses the notion of "strong concepts".  In
      particular, this allows a template implementation to be verified
      to be internally consistent.

3.5 Syntax for the INSTANTIATE statement
----------------------------------------

The INSTANTIATE statement specifies an instance of a template
and instantiation arguments that become associated with the deferred
arguments of that template.

<instantiate-stmt>
     <<is>> INSTANTIATE [::] <template-name> (
            [ <instantiation-arg-spec-list> ] ) [, <rename-list> ]
     <<or>> INSTANTIATE [::] <template-name> (
            [ <instantiation-arg-spec-list> ] ), ONLY : [ <only-list> ]

Constraint: Within an <instantiate-stmt>, <instantiation-arg> shall
            not depend on any entity defined within the referenced
            template.

Note: <generic-spec> includes operators, defined assignment and
      defined I/O.  The last may be somewhat awkward to use within a
      template without re-expressing as defined I/O again.


4. Other miscellaneous changes
------------------------------

* 5.1 High level syntax

  Extend R508 <specification-construct>:
     <<or>> <template>
     <<or>> <instantiate-stmt>

* 7.3.2.1 Type specifier syntax

  Extend R702 <type-spec>:
  " <<or>> <deferred-type>"

  Extend R703 <declaration-type-spec>:
  "TYPE(<deferred-type>)"


* 7.5.2.1 Syntax of a derived-type definition

  New constraint or R728:
  "<parent-type-name> shall not be a <deferred-type>.

* 8.5.8.1 General

  Change last entry for <array-spec>

  From:
      <<or>>   <assumed-rank-spec>

  To:
      <<or>>   <assumed-or-deferred-rank-spec>

* 8.5.8.2 Explicit-shape array

Note:

It may be better to modify <explicit-shape-bounds-spec> to
disambiguate <explicit-bounds-expr> for lower and upper bounds.  This
would make constraint for deferred constants clearer.


* 8.5.8.7 Assumed-rank entity

  Changes title of section to "Assumed-rank or deferred-rank entity."

  Delete <assumed-rank-spec> and add
  <assumed-or-deferred-rank-spec>  <<is>> ..

  (Change all <assumed-rank-spec> throughout the document.)

  Add new constraint:

  Constraint:  A deferred-rank entity shall be a <deferred-const>.

* 8.5.17  RANK clause

  Replace constraint C864 which states:

     An entity declared with a rank-clause shall be a dummy data
     object or have the ALLOCATABLE or POINTER attribute.

  With:

     An entity declared with a rank-clause shall be a named constant,
     dummy data object or have the ALLOCATABLE or POINTER attribute.

* 8.8p2 IMPORT Statement

  Modify sentence 2 in p2 from:

     This is the default for an interface body that is not a module
     procedure interface body.

     To:

     This is the default for an interface body that is not a module
     procedure interface body or a deferred interface body.

  Modify sentence 2 in p4 from:

     This is the default for a derived-type definition, internal
     subprogram, module procedure interface body, module subprogram,
     or submodule.

  To:

     This is the default for a derived-type definition, internal
     subprogram, module procedure interface body, deferred interface
     body, module subprogram, or submodule.

* 10.1.12 Constant expression

  Extend list in normative text for "constant expression":
  "deferred constant"

* 15.4.3.2 Interface block

  Extend rule R1502 <interface-specification> to include
  <deferred-interface-body>.

 From:

 <interface-specification> <<is>> <interface-body>
                           <<or>> <procedure-stmt>

 To:

 <interface-specification> <<is>> <deferred-interface-body>
                           <<or>> <interface-body>
                           <<or>> <procedure-stmt>

Modify C1503 to prevent use of deferred arguments:

  From:

    C1503 (R1503) If the interface-stmt is ABSTRACT INTERFACE, then the
    function-name in the function-stmt or the subroutine-name in the
    subroutine-stmt shall not be the same as a keyword that specifies
    an intrinsic type.

  To:

    C1503 (R1503) If the interface-stmt is ABSTRACT INTERFACE, then
    the function-name in the function-stmt or the subroutine-name in
    the subroutine-stmt shall not be the same as a keyword that
    specifies an intrinsic type, or a <deferred-arg-name>.


* 15.5.1 Syntax of a procedure reference

  Extend R1522 <procedure-designator>:
  " <<or>> <deferred-proc>"

  Extend R1524 <actual-arg>:
  " <<or>> <deferred-proc> "


===END===







