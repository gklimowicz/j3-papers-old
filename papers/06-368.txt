
                                                           J3/06-368

To: J3
From: R. Bleikamp
Subject: interp F03/0050
Date: 09 November 2006

NUMBER: F03/0050
TITLE: Questions about internal files
KEYWORDS: internal file, data transfer
DEFECT TYPE: Interpretation
STATUS: J3 consideration in progress

QUESTIONS:

Question 1:

Fortran 2003 does not seem to prohibit this kind of recursive internal
I/O.  Was this program intended to be standard-conforming?  If so,
then what does the program print?

MODULE m1
  CHARACTER(20) :: ifile = ''
CONTAINS
  CHARACTER(3) FUNCTION foo()
    WRITE(ifile, *) 'QWERTY'
    foo = 'abc'
  END FUNCTION
END MODULE

PROGRAM ex1
  USE m1
  WRITE(ifile, *) 'xyz', foo(), 'zyx'
  PRINT *, ifile
END PROGRAM

Question 2:

Fortran 2003 does not seem to prohibit this kind of recursive internal
I/O.  Was this program intended to be standard-conforming?  If so,
then what does the program print?

MODULE m2
  CHARACTER(20) :: ifile = 'abc def ghi jkl mno '
  CHARACTER(3) :: char
CONTAINS
  CHARACTER(3) FUNCTION foo()
    READ(ifile, *) char
    foo = 'abc'
  END FUNCTION
END MODULE

PROGRAM ex2
  USE m2
  WRITE(ifile, *) 'xyz', foo(), 'zyx'
  PRINT *, ifile
  PRINT *, char
END PROGRAM

Question 3:

Fortran 2003 does not appear to prohibit modifying a character
variable when it is being used as an internal file in a data transfer
statement that is currently executing.  Was this program intended to
be standard-conforming?  If so, then what does the program print?

MODULE m3
  CHARACTER(20) :: ifile = ''
CONTAINS
  CHARACTER(3) FUNCTION foo()
    ifile = 'bad thing to do?'
    foo = 'abc'
  END FUNCTION
END MODULE

PROGRAM ex3
  USE m3
  WRITE(ifile, *) 'xyz', foo(), 'zyx'
  PRINT *, ifile
  PRINT *, flag
END PROGRAM

Question 4:

Fortran 2003 does not appear to prohibit referencing a character
variable when it is being used as an internal file in a data transfer
statement that is currently executing.  Was this program intended to
be standard-conforming?  If so, then what does the program print?

MODULE m4
  CHARACTER(20) :: ifile = ''
  LOGICAL :: flag = .FALSE.
CONTAINS
  CHARACTER(3) FUNCTION foo()
    IF (ifile == ' xyz') THEN
      flag = .TRUE.
    END IF
    foo = 'abc'
  END FUNCTION
END MODULE

PROGRAM ex4
  USE m4
  WRITE(ifile, *) 'xyz', foo(), 'zyx'
  PRINT *, ifile
  PRINT *, flag
END PROGRAM

ANSWER:

All of these examples were intended to be prohibited.
Edits are provided to prohibit referencing or defining a variable used
as an internal unit as a result of evaluating any output list items, or
transfering values to any input list item.

EDITS:

In section 9.5.3.4, after the paragraph:
    "If an internal file has been specified, an input/output list item
    shall not be in the file or associated with the file."

add these paragraphs [196:29+]:

  "During the execution of an output statement that specified an
  internal unit, no part of that internal unit shall be referenced
  or defined as the result of evaluating any output list item.

  During the execution of an input statement that specified an
  internal unit, no part of that internal unit shall be defined
  as the result of transfering a value to any input list item."

SUBMITTED BY: Rob James

HISTORY: 05-141  m171  F03/0050 Submitted
