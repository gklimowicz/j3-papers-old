                                                               J3/10-146

To: J3
Subject: Interpretation concerning namelist
From: Van Snyder
Date: 2010 April 01

----------------------------------------------------------------------

NUMBER: F08/xxxx
TITLE: Are assumed- or deferred-shape objects allowed in namelist?
KEYWORDS: assumed-shape, deferred-shape, namelist
DEFECT TYPE: Erratum
STATUS: Under consideration

QUESTION:

At [09-007r3:111:19-20 5.6p5] we find

        A namelist group object shall either be accessed by use or host
        association or shall have its type, type parameters, and shape
        specified by previous specification statements or the procedure
        heading in the same scoping unit or by the implicit typing rules
        in effect for the scoping unit.

Because "type parameters, and shape" appear, is the following
conforming?

  real, allocatable :: A(:)
  real, pointer :: B(:)
  character(len=:), allocatable :: C
  namelist /N/ A, B, C

DISCUSSION:

The wording of 5.6p5 is a result of not completely finishing the
replacement of the constraint at [97-007r2:66:1-4 5.4]:

        A <namelist-group-object> shall not be an array dummy argument
        with nonconstant bound, a variable with nonconstant character
        length, an automatic object, a pointer, a variable of a type
        that has an ultimate component that is a pointer, or an
        allocatable array.

by [04-007:95:10 5.4 C574] which became [09-007r3:111:10 5.6 C585]:

C585 (R564) A <namelist-group-object> shall not be an assumed-size
     array.

ANSWER:

It was intended that the above conform.  Edits are supplied to clarify
this.

EDITS:

In the first sentence of 5.6p5, replace "type parameters, and shape" by
"kind type parameters, and rank".

ALTERNATIVE EDITS:

Delete the first sentence of 5.6p5 because modern processors can handle
forward references. It might appear to be reasonable to replace it by

C586a (R563) A <namelist-group-object> shall be accessible in the
      scoping unit in which the <namelist-stmt> appears.

but this doesn't actually say anything useful.  The scoping rules in
Clause 16 already handle this.

SUBMITTED BY: Van Snyder on behalf of Tobias Burnus

HISTORY:

----------------------------------------------------------------------
