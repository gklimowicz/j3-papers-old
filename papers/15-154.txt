                                                            J3/15-154
To: J3
From: Malcolm Cohen
Subject: Response to 15-104
Date: 2015 February 26


1. Introduction

This is the response to the editor's report 15-104.

2. Responses

14-247r3:
>  [64:26 4.5.2.2p2] ACTION: Further wordsmithing required.

[64:29] 4.5.2.2 Accessibility, p1,
        insert after the first sentence:
          "An <access-spec> on the <derived-type-stmt> specifies the
           accessibility of the type name."

[65:1] Same subclause, p2,
       "type definition is private,"
       ->"derived type is defined in the scoping unit of a module,
          and its name is private in that module,",
       "the module containing the definition, and within"
        ->"that module and",
        Making the whole sentence read
          "If a derived type is defined in the scoping unit of a module,
           and its name is private in that module, then the type name and
           thus the structure constructor (4.5.10) for the type, are
           accessible only within that module and its descendants."
{Wordsmith!}

>[387:8+] ACTION: Index "unordered segments".

[various] Index "unordered segments" at
    190:25
    190:28-29
    Note 8.30
    Note 8.31
    321:14-15
    329:4
    329:7
    387:6
    496:35
    497:13
making the one at 190:25 bold.

>EXTRA EDIT: say something about "getenv" in the pd list.

[357:15] 13.7.68 GET_ENVIRONMENT_VARIABLE, p3 Arguments, NAME,
         End the last sentence with a full stop.

[497:10+] Annex A, after the bullet ending "trailing blanks (13.7.67);",
  insert new bullet
    "- the interpretation of case for the NAME argument of the
       intrinsic subroutine GET_ENVIRONMENT_VARIABLE (\ref);".

14-270r1:
>  [270:24] EXTRA EDIT: deleted the sentence
>    "Each input value following the equals shall then be acceptable to
>     format specifications for the type of the list item in the
>     corresponding position in the expanded sequence, except as noted in
>     this subclause.", as this seems to be covered by the new wording
>     about raising an error condition.
>ACTION: Check wording and confirm that this is the case.

Seems to be ok?

14-271r1:
>  [error termination]
>    I note that several places, especially in the coarray stuff, refer to
>    "termination of execution" or just "initiated termination", when only
>    normal termination is intended, not error termination.  These ought to
>    be improved.  Also, "normal termination" ought to be hyperlinked and
>    indexed similarly.
>ACTION: Do something about this.

[79:15-16] Index both "error termination" and "normal termination".

[136:15] "initiated termination" -> "initiated normal termination"
         and index nt.

[197:5] "initiated termination" -> "initiated normal termination"
        and index nt.

[200:10] Index nt.

[212:20] Index nt.

[213:1] "termination of execution of a program" -> "normal termination",
        Index nt.

[409:24] "termination of execution" -> "normal termination",
         Index nt.

[throughout] Hyperlink "normal termination" and the remaining "termination
             of execution" to \ref{D2:Termination of execution}.

>  [539:5-10] "A procedure" -> "Any procedure", as the whole paragraph is
>    talking about defining external procedures.
>COMMENT: In retrospect this additional final sentence is probably not
>         needed at all.

[538:33-34] Delete "Any procedure defined by ... external procedure.".
{Contributes nothing, anyway module procedures in intrinsic modules are
 frequently defined by means other than Fortran!}

>ACTION: The edit descriptors are indexed under e.g. "edit descriptor!A",
>        but perhaps they should also be indexed under "A edit descriptor"?
>    Unindexed "format descriptor!G".

[throughout] Yes index that way too.

>ACTION: Should the "position editing" descriptors be called "position edit
>        descriptors"?

[throughout] Yes.

===END===
