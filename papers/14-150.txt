To:      J3                                                 J3/14-150
From:    John Reid
Subject: GET_TEAM as a function
Date: 2014 May 17
References: N2007, N2013

Discussion
----------

In his vote (see N2013), Van Snyder says

"Since TEAM_TYPE is not prohibited in a variable definition context,
GET_TEAM could be a function instead of a subroutine.  This would be
handy for passing team variables as actual arguments."

This paper contains edits to implement this.

Edits to N2007:
---------------

[11:12+] In note 5.2, change the line involving GET_TEAM to
     INITIAL = GET_TEAM()

[24:20-31] Replace by

"<7.4.13 GET_TEAM([DISTANCE])>

<Description.> Team value.

<Class.>  Transformational function.

<Argument.> DISTANCE (optional) shall be a scalar nonnegative integer.
      It is an INTENT(IN) argument.

<Result Characteristics.> Scalar and of type TEAM TYPE defined in the
ISO_FORTRAN_ENV intrinsic module.

<Result Value> If DISTANCE is not present, the result is the value of
a team variable of the current team. If DISTANCE is present with a
value less than or equal to the team distance between the current team
and the initial team, the result is the value of a team variable of the
ancestor team at that distance. Otherwise, the result is the value of a
team variable for the initial team."

[24:37] Change line to
    WORLD_TEAM = GET_TEAM()

[25:9] Change line to
    PARENT_TEAM = GET_TEAM()

[34:14+] Change the entry for GET_TEAM to
    GET_TEAM    ([DISTANCE])    T    Team value.
