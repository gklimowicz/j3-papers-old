To: J3                                                       11-243
Subject: Replace "points to" in TS 29113
From: Bill Long
Date: 2011 October 10
References: WG5/N1869, WG5/N1880 WG5/N1881

Discussion:

UK comment GB21 replaces "result shall point to" by "result shall be
the address of". On pointing out that this wording pattern exists in
other places in the TS document, the Fortran standard editor requested
that the change be made uniformly in the TS.

There are two general patterns:

1) "xxx shall point to yyy" where xxx is the name of a pointer and yyy
is often "a C descriptor".  These should be changed to "xxx shall be
the address of yyy".

2) "yyy pointed to by xxx" where xxx is the name of a pointer and yyy
is often "a C descriptor". These should be changed to "yyy with the
address xxx".

Other cases occur with less frequency.

The edits below assume the similar edits in 11-231r1 have already been
applied, and hence they are not repeated here.




Edits to N1869:

These macros are used in the edits below, to avoid repeating the same
text multiple times.

E1(xxx) = Replace "xxx shall point to a C descriptor" with "xxx shall
be the address of a C descriptor".

E2(xxx) = Replace "C descriptor pointed to by xxx" with "C descriptor
with the address xxx".

-------- Begin edits-----

2.2, Note 2.3: Replace "corresponding formal parameter is a pointer to
a descriptor" with "corresponding formal parameter is the address of a
descriptor".

3.3, para 3, Replace "function is a pointer to a C descriptor" with
"function is the address of a C descriptor".

5.3.5.1, para 4: Replace "an object that is pointed to be a formal
parameter" with "an object that has its address given by a formal
parameter".

5.3.5.2, dv para: E1(\cf{dv})

5.3.5.2, subscripts para: Replace "subscripts points to a subscripts
array" with "subscripts is the address of a subscripts array".

5.3.5.2, NOTE 5.6: Replace "need not point to an object" with "need
not be the address of an object".

5.3.5.2, Example, line 1: Replace "If \cf{dv} points to a C" with "If
\cf{dv} is the address of a C".

5.3.5.3, dv para: E1(\cf{dv})

5.3.5.3 lower_bounds para: Replace "lower_bounds points to a lower"
with "lower_bounds is the address of a lower".

5.3.5.3 upper_bounds para: Replace "upper_bounds points to an upper"
with "upper_bounds is the address of an upper".

5.3.5.3, para 1 following the elem_len description: Replace "C
descriptor pointed to by the dv argument" with "C descriptor with the
address dv".

5.3.5.3, Example para: Replace "If \cf{dv} points to a C" with "If
\cf{dv} is the address of a C".

5.3.5.4, dv para: E1(\cf{dv})

5.3.5.4, Example para: Replace "If \cf{dv} points to a C" with "If
\cf{dv} is the address of a C".

5.3.5.5, dv para: E1(\cf{dv})

5.3.5.5, dv para, sentence 2: Replace "It shall not point to a C
descriptor that is pointed to by either a C formal" with "It shall
not have the same value as either a C formal".

5.3.5.5, dv para, last sentence: Replace "It shall not point to a C"
with "It shall not be the address of a C".

5.3.5.5, base_addr para, sentence 2: Replace "it shall be a pointer to
a contiguous" with "it shall be the address of a contiguous".

5.3.5.5, extents para: Replace "it shall point to an array" with "it
shall be the address of an array".

5.3.5.5, para 3 following the extents description: Replace "the object
pointed to by \cf{dv}" with "the object with the address \cf{dv}".

5.3.5.6, dv para: E1(\cf{dv})

5.3.5.7, result para: Replace "If result points to a C... C formal
parameter" with "If the value of result is the same as either a C
formal parameter".

5.3.5.7, source para: Replace "C descriptors pointed to be source and
result" with "C descriptors with the addresses source and result".

5.3.5.7, strides para: E2(\cf{source})

5.3.5.7, para 1 following the strides description: E2(\cf{result});
E2(\cf{source})

5.3.5.7, para 2 following the strides description: E2(\cf{result})

5.3.5.7, beginning of first Example: Replace "If source already points
to a C" with "If source is already the address of a C".

5.3.5.7, beginning of second Example: Replace "If source already
points to a C" with "If source is already the address of a C".

5.3.5.8, result para: E1(\cf{result})

5.3.5.8, result para: Replace "If result points to a C... C formal
parameter" with "If the value of result is the same as either a C
formal parameter".

5.3.5.8 source para: E1(\cf{source}) Replace "C descriptors pointed to be
source and result" with "C descriptors with the addresses source and
result".

5.3.5.8 displacement para: E2(\cf{source})

5.3.5.8 para 1 following the elem_len description: E2(\cf{result})
{twice}; E2{\cf{source})

5.3.5.8 para 2 following the elem_len description: E2(\cf{result})

5.3.5.8, Example para, first sentence: Replace "If source already
points to a C" with "If source is already the address of a C".

5.3.5.9, Description para: Replace "a Fortran pointer to point to
the whole" with "a Fortran pointer to be associated with the
whole". {Or should both "be" be "become" in this new sentence?}

5.3.5.9, result para: E1{\cf{result})

5.3.5.9 source para: Replace "source shall be a null pointer or
point to a C" with "source shall be a null pointer or the address of a
C".

5.3.5.9 source para: Replace "C descriptors pointed to by source
and result" with "C descriptors with the addresses source and result".

5.3.5.9 para following the lower_bounds description: E2(\cf{result});
E2(\cf{source})

5.3.5.9, para 2 following the lower_bounds description: Replace "If
source is a null pointer or points to a C" with "If source is a null
pointer or the address of a C".  E2(\cf{result}); E2(\cf{source})

5.3.5.9 para 3 following the lower_bounds description: E2{\cf{result})

5.3.5.9 Example para: Replace "If ptr already points to a C" with "If
ptr is already the address of a C".

5.3.5.9 Example para: Replace "the following code makes it point to
the same array" with "the following code updates it to a C descriptor
for a pointer to the same array".  {Added clarifying edit.}

5.3.6, para 2: Replace "If a C descriptor is pointed to by a formal"
with "If the address of a C descriptor is a formal".

5.3.7, para 3: Replace "If a pointer to a C descriptor" with "If the
address of a C descriptor".

5.3.8, para 2 following the item list: Replace "interpreted as a
pointer to a C descriptor" with "interpreted as the address of a C
descriptor".

6.9, penultimate section, para 2: Replace "interpreted as a pointer to
a C descriptor" with "interpreted as the address of a C descriptor".

A.2.4, para 1: Replace "variable to point at a global" with "variable
to become associated with a global".
