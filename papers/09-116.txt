To: J3                                                        09-116
From: Bill Long and John Reid
Subject: Coindexed actual arguments
Date: 2009 January 26
References: J3/09-007

Discussion

It was always intended that the rules for coindexed actual arguments be
based on the model of the processor making a copy on the executing
image and then making an ordinary call. See, for example,

   NOTE 12.23
   If the actual argument is a coindexed object, a processor that uses
   distributed memory might create a copy on the executing image of
   the actual argument, including copies of any allocated allocatable
   subcomponents, and associate the dummy argument with that copy.
   If necessary, on return from the procedure, the value of the copy
   would be copied back to the actual argument.

We seem to have overlooked excluding sequence association for a
coindexed actual argument. If this were allowed, the processor would
always have to copy all the array elements from the given element
onwards whenever the interface is implicit.

Edits are provided to correct this.


Edits to 09-007

[298:28-30] In 12.5.2.4 Ordinary dummy variables, para. 13, sentence 1,
    change "If the actual argument is scalar," to
    "If the actual argument is scalar and is coindexed, the
    corresponding dummy argument shall be scalar. If the actual
    argument is scalar and is not coindexed,".

[302:30] In 12.5.2.11 Sequence association, para. 1, sentence 1, after
    "array expression" change "," to "or a non-coindexed scalar that is".
