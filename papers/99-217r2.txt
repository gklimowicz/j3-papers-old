                                                       J3/99-217r2

Date:     23rd August 1999
To:       J3
From:     Malcolm Cohen
Subject:  Interpretation Request 71 on Character Array Constructors


NUMBER: 000071
TITLE: Character array constructors
KEYWORDS: Character, array constructor, zero-size
DEFECT TYPE: Erratum
STATUS:  J3 consideration in progress

QUESTION:
The f95 standard appears to leave the length of zero-sized character array
constructors undefined.  The penultimate paragraph of clause 4.5 says

  "The type and parameters of an array constructor are those of the
   <ac-value> expressions."

If there are no elements, then the values of the type parameters might not be
defined.  The type and kind are always well defined at compile time.  However,
the length parameter for zero-sized character array constructors is not
obviously well-defined, even at run-time.

Zero-sized constructors are certainly allowed, as mentioned in the
antipenultimate paragraph of clause 4.5:

  "An empty sequence forms a zero-sized rank-one array."

Experimentation with different f90 compilers yields varying results.

QUESTION 1:
Is the following a valid program and, if so, what len value does it print.

  program zero
    write (*,*) len( (/ ('abc', i = 1 , 0) /) )
  end

QUESTION 2:
Is the following a valid program and, if so, what value does it print.

    program zero_size
      integer :: n = 0
      call sub('abcdefghij', n)
    contains
      subroutine sub(string, n)
        character*(*) :: string
        integer :: n
        integer :: i
        write (*,*) len( (/ (string(:i+2), i = 1 , n) /) )
      end subroutine
    end program zero_size

QUESTION 3:
Is the following a valid program and, if so, what values does it print
for the lengths and for n_calls.

    program zero_size
      integer :: n = 0
      integer :: n_calls = 0
      call sub('abcdefghij', n)
      write (*,*) 'n_calls = ', n_calls
    contains
      subroutine sub(string, n)
        character*(*) :: string
        integer :: n
        integer :: i
        write (*,*) len( (/ (string(:f(i)), i = 1 , n), 'abcde' /) )
      end subroutine sub
      integer function f(i)
        f = 2*i + 5
        n_calls = n_calls + 1
      end function f
    end program zero_size

ANSWER:
(1) Yes.  The length is 3.
    Clause 4.5 says that
       "The type and type parameters of an array constructor are those of the
        <ac-value> expressions."
    There is no exclusion for <ac-value>s that contribute no elements to the
    value of the array constructor: thus <ac-value>s that are inside zero-trip
    implied DO loops still contribute their "type" information.

    The example array constructor has an <ac-value> that is the character
    literal 'abc'; this clearly has the character length of 3 and therefore
    the array constructor has a character length of 3.

    The description of how an <ac-value> that is an implied DO is handled
    confuses syntax and semantics: an edit is supplied to clarify this.

(2) No.  The edits below clarify this situation.

(3) Yes.  The length printed is 5, n_calls is still zero.
    Clause 4.5 says that
       "If the <ac-value> expressions are of type character, each <ac-value>
        expression in the <array-constructor> shall have the same character
	length parameter."

    The example array constructor has an <ac-value> that is the character
    literal 'abcde'; this clearly has the character length of 5 and therefore
    the array constructor has a character length of 5.

    No references to the function F are executed because these appear within
    a zero-trip implied DO loop.

EDITS:

In clause 4.5, in the paragraph beginning
   "If an <ac-value> is a scalar expression"
[46:1] replace:
   "an <ac-value> sequence"
with
   "a sequence of elements".

In clause 4.5, at the end of the paragraph which begins "If the <ac-value>
expressions are of type character" [45:38+], insert:

  "A zero-sized character array constructor shall have at least one <ac-value>
   that is an initialization expression, a <variable> that does not contain
   a <substring-range>, or a <substring> in whose <substring-range> all
   expressions are initialization expressions."

SUBMITTED BY: Richard Maine
HISTORY: 98-101   m144 submitted 20 Nov 1997
         99-207   m150 additional input
         99-217r1 m150 proposed answer
