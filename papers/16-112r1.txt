                                                             J3/16-112r1
To:         J3
From:       Bill Long & Malcolm Cohen
Subject:    Clause 4 edits
Date: 2016 February 09

Discussion:
----------

In 4.3.1, para 3, we have "Assignment (7.2) provides one means of
defining or redefining the value of a variable of any type.". Normally
we don't talk about defining a value. Variables get defined, but not
values.

Note 4.3 lists places where <type-spec> is used, and appears to claim
that DO CONCURRENT (and FORALL) use <declaration-type-spec>; this
claim is unwarranted (they both use <integer-type-spec>).

In 4.5.1p2 we say that a derived type may be parameterized by
"multiple" type parameters. It may also be parameterized by just one
type parameter. Might consider "one or more" to emphasize that the
case of one is permitted.

Also, "may" is wrong, all the statements in 4.5.1p2 are about capability
("can") not permisson.

The r0 of this paper said:
  We typically insert the space in "DOUBLE PRECISION". In one case, we
  don't. Proposed to change that case to be consistent.
Response: This case it is actually a name not a pair of keywords; no space
          is permitted within a name, so no change should be made.

Variables with LOCAL or LOCAL_INIT locality are automatically
"local". Propose to remove a redundancy in the subclause on
finalization.

Edits to 16-007:
-----

[53:6] 4.3.1 Relationship of types and values to objects, para 3,
       "defining or redefining" -> "changing".

[53:29+] 4.3.2.1 Type specifier syntax, NOTE 4.3,
         Before "Elsewhere" insert a new statement
  "An <integer-type-spec> is used in a DO CONCURRENT \obs{or FORALL}
   statement".

[62:24] 4.5.1 Derived type concepts, para 1,
        "may" -> "can".
{Capability not permission.}

[62:26-27] Same subclause, para 2,
           "may be parameterized by multiple"
           -> "can be parameterized by one or more",
           "may have a default value"
           -> "can have a default value".
{Clarification + capability - permission.}

[78:28] In 4.5.6.3 When finalization occurs, para 5, change "local
variable" to "variable".

===END===
