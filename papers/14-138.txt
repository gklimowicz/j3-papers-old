                                                          J3/14-138
To:      J3
Subject: LOCK_TYPE and POINTER
From:    Van Snyder
Date: 2014 April 03

1. Introduction
===============

One cannot have a pointer of type LOCK_TYPE because C1302 requires a
named variable of type LOCK_TYPE to be a coarray, while C526 requires a
coarray to be allocatable or a dummy argument.

One can have a pointer component of type LOCK_TYPE.

This asymmetry is undesirable.

2. Proposal
===========

Eliminate C1302.  Instead constrain <lock-variable> to be a coarray, a
coindexed object, or a pointer in C850.  In pointer assignment, if a
<data-pointer-object> is of type LOCK_TYPE, or of a type that has a
noncoarray potential subobject component of type LOCK_TYPE, constrain
the <data-target> to be a coarray or a pointer.  Thereby, by induction,
a LOCK_TYPE pointer can only be associated with a coarray.

3. Edits
========

[160:12+] Insert a constraint:

"C719a (R733) If <data-pointer-object> is of type LOCK_TYPE, or is of a
       type that has a noncoarray potential subobject component of type
       LOCK_TYPE, <data-target> shall be a pointer or a coarray."

[195:8 C850] Append ", and shall be a pointer, a coarray, or a coindexed
object".

[403:36-37 C1302] Delete C1302.

[404:2 C1303] After "<allocate-object>" insert "that is not a pointer in
a DEALLOCATE statement, as an <allocate-object> that is not a pointer in
an ALLOCATE statement provided a SOURCE= specifier does not appear, as a
<data-pointer-object> or <data-target> in a <pointer-assignment-stmt>,
as a <pointer-object> in a NULLIFY statement, as an actual argument in a
reference to a procedure with explicit interface if the corresponding
dummy argument has the POINTER attribute".

[404:5 C1304] After "<allocate-object>" insert "that is not a pointer in
a DEALLOCATE statement, as an <allocate-object> that is not a pointer in
an ALLOCATE statement provided a SOURCE= specifier does not appear, as a
<data-pointer-object> or <data-target> in a <pointer-assignment-stmt>,
as a <pointer-object> in a NULLIFY statement, as an actual argument in a
reference to a procedure with explicit interface if the corresponding
dummy argument has the POINTER attribute".

Alternatively, use lists in C1303 and C1304:

C1303 A lock variable shall not appear in a variable definition context
      except as
  (1) the <lock-variable> in a LOCK or UNLOCK statement,
  (2) an <allocate-object> that is not a pointer in a DEALLOCATE
      statement,
  (3) an <allocate-object> that is not a pointer in an ALLOCATE
      statement provided a SOURCE= specifier does not appear,
  (4) a <data-pointer-object> or <data-target> in a
      <pointer-assignment-stmt>,
  (5) a <pointer-object> in a NULLIFY statement,
  (6) an actual argument in a reference to a procedure with explicit
      interface if the corresponding dummy argument has the POINTER
      attribute, or
  (7) an actual argument in a reference to a procedure with explicit
      interface if the corresponding dummy argument has the
      INTENT(INOUT) attribute.

C1304 A varable with a subobject of type LOCK_TYPE shall not appear in a
      variable definition context except as
  (1) an <allocate-object> that is not a pointer in a DEALLOCATE
      statement,
  (2) an <allocate-object> that is not a pointer in an ALLOCATE
      statement provided a SOURCE= specifier does not appear,
  (3) a <data-pointer-object> or <data-target> in a
      <pointer-assignment-stmt>,
  (4) a <pointer-object> in a NULLIFY statement,
  (5) an actual argument in a reference to a procedure with explicit
      interface if the corresponding dummy argument has the POINTER
      attribute, or
  (6) an actual argument in a reference to a procedure with explicit
      interface if the corresponding dummy argument has the
      INTENT(INOUT) attribute.

The condition "an <allocate-object> that is not a pointer" is desirable
but not strictly necessary.  A coarray has to be either allocatable or a
dummy argument, and deallocating an allocatable variable that is a
target of a pointer by way of the pointer is prohibited.  But... that's
not a constraint.
