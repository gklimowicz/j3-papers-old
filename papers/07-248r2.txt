To:       J3                                                      07-248r2
From:     Malcolm Cohen
Subject:  Interpretation: Allocatable array on intrinsic assignment
          with scalar expr
Date: 2007 August 10

----------------------------------------------------------------------

NUMBER:   F03/0093
TITLE:    Allocatable array on intrinsic assignment with scalar expr
KEYWORDS: allocatable array, intrinsic assignment
DEFECT TYPE: Erratum
STATUS:   J3 consideration in progress

QUESTION:

Consider

    CHARACTER(:), ALLOCATABLE :: str(:)
    ALLOCATE (CHARACTER(1) :: str(0:9))
    str = 'reallocate?'

According to the third paragraph of 7.4.1.3, the variable STR should
be deallocated on this assignment because it has a deferred length
type parameter different from the <expr> ('reallocate?'); it should
then be allocated with its length type parameter the same as that of
the <expr> and with the shape and bounds of <expr>.  But the STR
cannot be allocated with the shape and bounds of the <expr> since it
is a scalar.

The standard, however, provides a possible interpretation for the
shape of <expr> two paragraphs later where it says
  "If <expr> is a scalar and <variable> is an array, the <expr> is
   treated as if it were an array of the same shape as <variable>
   with every element of the array equal to the scalar value of
   <expr>."

Q(1). Should the variable STR be reallocated in this case?

Q(2). If so, what are the values of its length type parameter, shape
      and bounds?

ANSWER:

(1) Yes, STR should be reallocated - that is the purpose of the
    combination of ALLOCATABLE and deferred type parameters.  If
    the user does not wish for automatic reallocation he can use
    "str(:) = 'do not reallocate'" instead.

(2) The length parameter of str after the assignment is 11 (the value
    returned by LEN('reallocate?')).  The shape and bounds should be
    unchanged.  An edit is provided to clarify this.

Note that the standard does not forbid, but does not specify semantics
for,
  str = 'oops'
when STR is an unallocated array with a deferred length parameter.
An edit is supplied to make it clear that this is not allowed.

Note also that this applies to parameterized derived types with
deferred type parameters.

EDITS:

[139:22-] Insert new sentence at beginning of paragraph
  "If <variable> is an unallocated allocatable array, <expr> shall
   be an array."

[139:25] Change "corresponding type parameters of <expr>,"
         to "corresponding type parameter of <expr>."
{Note to J3: fix singular/plural correspondance}

[139:25] Before ", with the shape of <expr>"
         Insert ". If <variable> is an array and <expr> is scalar it is
                 allocated with the same bounds as before, otherwise
                 it is allocated".
{Note to J3: Malcolm thinks it is clear from context what "it" and
 "before" mean, but further wordsmithing could be done.}

SUBMITTED BY: Jim Xia

HISTORY: 07-248    m181  Submitted
         07-248r1  m181  Revised answer.
