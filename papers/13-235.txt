                                                            13-235
To:       J3
From:     Malcolm Cohen
Subject:  Interp F08/0086 on implied shape
Date: 2013 February 07


1. Introduction

Below is a revised F08/0086; the main ANSWER and EDITS basically
answer the question the same way (but the mistakes have been
removed).  The alternative answer provides the extension suggested
by Bob Corbett.


2. The revised interp

----------------------------------------------------------------------

NUMBER: F08/0086
TITLE: 	Implied-shape and separate PARAMETER statement
KEYWORDS: Implied-shape, PARAMETER
DEFECT TYPE: Clarification or Erratum
STATUS: J3 consideration in progress

QUESTION:

Q1.  Consider

  Program test1
    Character(*) a,b(*)
    Dimension c(*)
    Parameter (a='123', b=['1','2','3'])
    Character(*),Parameter :: c = [ '44','55','66' ]
    Print *,a,b,c
  End

The definition of the assumed-length character named constant A
conforms to Fortran 77 to Fortran 2008.  However, the definition of
the implied-shape named constant B appears not to conform to Fortran
2008, as the standard says in 5.4.11p2
  "A named array constant defined by a PARAMETER statement shall have
   its shape specified in a prior specification statement."
On the other hand, the named constant C does not have such a
requirement, so its definition would appear to be conforming.

This apparent requirement on the named constant B would thus appear to
be inconsistent with those on the named constant C, as well as
inconsistent with the way that assumed length works, and with the
general principle of allowing attributes to be specified either in a
single type declaration statement or with separate specification
statements.

Is the program intended to conform to the Fortran standard?

Q2. Consider

  Subroutine test2(a)
    Real,Dimension(*) :: a,c
    Parameter (c = [ 45.6 ])
    a(b) = c
  End Subroutine

The <array-spec> in the type declaration statement is ambiguous; if it
is an <implied-shape-spec> then the declaration of A as an
assumed-size array is erroneous, but if it is an <assumed-size-spec>
then the declaration of B as an implied-shape array is erroneous.

Is this program-unit intended to be standard-conforming?

ANSWER:

A1.  No, the program is not intended to conform to the Fortran
     standard.  A clarifying edit is supplied to make it clear that an
     implied-shape array specification is only permitted for a named
     constant whose value is given in the same statement.  This makes
     it clear that the declarations of both B and C are non-conforming.

A2. No, the program is not intended to conform to the Fortran
    standard.  This is clarified by the same edit that clarifies the
    answer to question 1.

ALTERNATIVE ANSWER:

A1. Yes, the program was intended to conform to the Fortran standard.
    An edit is provided to modify the requirement for prior
    specification so as to allow this case.

A2. Yes, the program is intended to conform to the Fortran standard.
    An edit is provided to add syntax to permit this unambiguously.

EDIT to 10-007r1:

[97:27+] In 5.3.8.6, insert new constraint
  "C535a An <implied-shape-spec> shall appear only in a type
         declaration statement in which the PARAMETER keyword
         appears."

ALTERNATIVE EDITS:

[94:10] 5.3.8.1, R515,
        Change "<implied-shape-spec-list>" to "<implied-shape-spec>".
{This will be the unambiguous implied-shape syntax.}

[94:10+] Insert new production
         "<<or>> implied-shape-or-assumed-size-spec".
{This will be the otherwise-ambiguous syntax.}

[95:32] 5.3.8.5p1
  Replace sentence
    "An assumed-size array is declared with an <assumed-size-spec>."
  with
    "A dummy argument is declared to be an assumed-size array by an
     <assumed-size-spec> or an <implied-shape-or-assumed-size-spec>."
{Now two ways of declaring assumed size.}

[95:33] After "<<is>>" insert "<explicit-shape-spec>,".
{The unambiguous case starts with an <explicit-shape-spec>.}

[95:37+] Insert new BNF rule and constraint
  "R521a <implied-shape-or-assumed-size-spec> <<is> [ <lower-bound> :
                                                    ] *
   C534a An object whose array bounds are specified by an
         <implied-shape-or-assumed-size-spec> shall be a dummy data
         object or a named constant."
{The otherwise-ambiguous case.  Note careful wording.}

[96:24-25] 5.3.8.6p1
  Replace sentence
    "An implied-shape array ... <implied-shape-spec-list>."
  with
    "A named constant is declared to be an implied-shape array by an
     <implied-shape-or-assumed-size-spec> or an <implied-shape-spec>."
{Now two ways of declaring implied shape.}

[96:26] R522, append ", [ [ <lower-bound> : ] * ]...".
{This is now the unambiguously implied-shape spec.}

[107:11] 5.4.11p1 "shape" -> "rank".
{In the PARAMETER statement, only require the rank to be specified in
 a prior specification statement.}

NOTES ON THE ALTERNATIVE EDITS:

(1) Since "[ <lower-bound> : ] *" now appears 4 times, it might make
    sense to define a BNF term for it, e.g. <star-bounds>, and use
    that term in those places instead.

(2) The current wording of C533 is slightly defective, as it does not
    clearly prohibit "REAL,DIMENSION(*) :: dummy,nondummy", seeing as
    how that does indeed declare "the array bounds of a dummy data
    object".  C533 should probably be reworded similarly to C534a.

SUBMITTED BY: Bill Long

HISTORY: 12-191  m199  F08/0086 submitted - revised by Malcolm Cohen -
                        passed by J3 meeting
         13-mmm  m200  Failed letter ballot
         13-nnn  m200  Revised with straw votes

----------------------------------------------------------------------
