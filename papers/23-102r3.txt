To: J3                                                     J3/23-102r3
From: T. Clune & subgroup generics
Subject: Formal syntax for generics
Date: 2023-February-24

Reference: 22-120r5, 22-151r3, 22-154r5, 23-007

1. Introduction
===============

This paper contains the syntax for generic programming features.
Section 2 contains a succinct, non-pedagogical example that exercises
most of the proposed syntax.  Section 3 provides the formal syntax and
is further broken into the following subsections:

  3.1 Deferred entities
  3.1.1 Syntax for deferred arguments
  3.1.2 Deferred argument association

  3.2 Syntax for the REQUIREMENT construct
  3.2.1 Requirement interface body
  3.3 Syntax for the REQUIRES statement

  3.4 Syntax for the TEMPLATE construct
  3.4.1 Template specification part
  3.4.2 Template subprogram part
  3.4.3 Additional constraint
  3.5 Syntax for the INSTANTIATE statement

Section 4 provides other miscellaneous changes.

2. Example
==========

MODULE A

   REQUIREMENT R(T,F)
      TYPE, DEFERRED :: T
      FUNCTION F(x, i) RESULT(y)
         TYPE(T) :: y
         TYPE(T), INTENT(IN) :: x
         INTEGER, INTENT(IN) :: i
      END FUNCTION F
   END REQUIREMENT R
   
   TEMPLATE B(T,F,C)
      REQUIRES R(T,F)            ! provides interface for deferred F
      TYPE, DEFERRED :: T        ! redundant decl of deferred type T
      INTEGER, CONSTANT :: C(..) ! deferred rank constant
   CONTAINS
      SUBROUTINE SUB1(x)
         TYPE(T), INTENT(INOUT) :: x
         x = F(x, SUM(C))
      END SUBROUTINE SUB1
      SUBROUTINE SUB2(x)
         TYPE(T), INTENT(INOUT) :: x
         x = F(x, MAXVAL(C))
      END SUBROUTINE SUB2
   END TEMPLATE B

END MODULE A

MODULE B
  USE MODULE A

  INSTANTIATE B(REAL, OPERATOR(*), [3,4]), ONLY: &
              & tot_sub1 => sub1
  INSTANTIATE B(REAL, OPERATOR(+), [3,4]), ONLY: & ! different instance
              & max_sub1 => sub2  

CONTAINS

   SUBROUTINE DO_SOMETHING(x)
      REAL, INTENT(INOUT) :: x

      x = 2.
      CALL tot_sub(x) 
      PRINT*,'TOT: ', x ! expect 2. * (3+4) = 14.

      x = 3.
      CALL max_sub(x) 
      PRINT*,'MAX: ', x ! expect 3. + max(3,4) = 7.

   END SUBROUTINE DO_SOMETHING
END MODULE B


3. Formal Syntax
================

3.1 Deferred entities
--------------------

A deferred argument is an entity that takes some of its
characteristics from its ultimate instantiation argument.  A deferred
argument can be a constant, type, or procedure and can appear in a
REQUIREMENT or TEMPLATE construct (3.2, 3.4).  Association with
instantiation arguments occurs in the REQUIRES and INSTANTIATE
statements.

A deferred constant is a deferred argument that can appear in constant
expressions with a REQUIREMENT or TEMPLATE construct.

A deferred type is a deferred argument that can appear as a type-spec
within a REQUIREMENT or TEMPLATE construct.

A deferred procedure is a deferred argument that can appear in
procedure references within a REQUIREMENT or TEMPLATE construct.  A
deferred procedure's interface shall be defined by that REQUIREMENT or
TEMPLATE construct, possibly in terms of deferred types and constants.

3.1.1 Syntax for deferred arguments
-----------------------------------

A deferred argument declaration construct is used to declare
REQUIREMENT or TEMPLATE arguments.

<deferred-arg> <<is>> <deferred-arg-name>

<deferred-arg-decl-construct> <<is>> <deferred-const-declaration-stmt>
                              <<or>> <deferred-proc-declaration-stmt>
                              <<or>> <deferred-type-declaration-stmt>
                              <<or>> <requires-stmt>

<deferred-const-declaration-stmt> <<is>>
           <declaration-type-spec>, <deferred-attr-constant-spec> ::
           <deferred-const-list>

<deferred-attr-constant-spec> <<is>> [<deferred-attr-spec>,]...
                                          CONSTANT
                                          [,<deferred-attr-spec>]...

<deferred-attr-spec> <<is>> CONTIGUOUS
                        <<or>> <dimension-spec>
                        <<or>> <rank-clause>

Constraint: An entity declared in <deferred-const-declaration-stmt>
            shall be INTEGER, LOGICAL, or assumed-length character.

<deferred-const-entity-decl> <<is>> <deferred-const> [ ( <array-spec> ) ]

Contraint: If <array-spec> appears in <deferred-const-entity-decl>, it
           shall not be <assumed-shape-spec-list>,
           <assumed-shape-bounds-spec>, or <deferred-shape-spec-list>.

<deferred-const> <<is>> <name>

Constraint: Each <deferred-const> shall appear in <deferred-arg-list>
            of the innermost scoping unit.

A <deferred-const> is a deferred constant.

<deferred-proc-declaration-stmt> <<is>>
     PROCEDURE[(<interface>)] :: <deferred-proc-list>

<deferred-proc> <<is>> <name>

Constraint: Each <deferred-proc> that appears in a
            <deferred-proc-declaration-stmt> shall appear in
            <deferred-arg-list> of the innermost scoping unit.

Constraint: Each <deferred-arg> shall appear in a
            <deferred-arg-decl-construct> or as a <function-name> or
            <subroutine-name> within an <interface-body> or a
            <requirement-interface-body>.

A <deferred-proc> is a deferred procedure.  A <deferred-arg> that
appears as the <function-name> or <subroutine-name> in an
<interface-body> or a <requirement-interface-body> is a deferred
procedure.

<deferred-type-declaration-stmt>
       <<is>>  TYPE, DEFERRED :: <deferred-type-list>

<deferred-type> <<is>> <name>

Constraint: Each <deferred-type> shall appear in
            <deferred-arg-list> of the innermost scoping unit.

Constraint: A <deferred-arg> declaration shall not have an
            <access-spec> nor shall it appear in a PUBLIC statement.

A <deferred-type> is a deferred type.

Note: Deferred arguments are local identifiers and are not externally
      accessible.


3.1.2 Deferred argument association
-----------------------------------

Instantiation arguments are specified by either an INSTANTIATE or a
REQUIRES statement.

<instantiation-arg-spec> <<is>>
        [ <keyword> = ] <instantiation-arg>

Constraint: Each <keyword> shall be the name of a <deferred-arg> in the
            referenced requirement or template.

In the absence of an argument keyword, an instantiation argument
corresponds to the deferred argument occupying the corresponding
position in <deferred-arg-list>; that is, the first instantiation
argument corresponds to the first deferred argument in the
reduced list, the second instantiation argument corresponds to the
second deferred argument in the reduced list, etc.

<instantiation-arg> <<is>> <constant-expr>
                    <<or>> <type-spec>
                    <<or>> <generic-spec>
                    <<or>> <procedure-name>
                      
Constraint: <constant-expr> shall be type INTEGER, LOGICAL or
            CHARACTER.

Constraint: An <instantiation-arg> that is a <constant-expr> shall
            correspond to a <deferred-arg> that is declared as a
            <deferred-const> in the referenced template or requirement.

Constraint: The type and kind of an <instantiation-arg> that is a
            <constant-expr> shall have the same type and kind of the
            declaration of the corresponding <deferred-const> in the
            referenced template or requirement.

Constraint: If the shape of the corresponding <deferred-const> in the
            referenced template or requirement is not assumed, then
            <constant-expr> shall have the same shape.

Constraint: If the rank of the corresponding <deferred-const> in the
            referenced template or requirement is not assumed, then
            <constant-expr> shall have the same rank.

Constraint: An <instantiation-arg> that is a <type-spec> shall
            correspond to a <deferred-arg> that is declared as a
            <deferred-type> in the referenced template or requirement.

Constraint: If an <instantiation-arg> is a <derived-type-spec>, it
            shall be allowed for a variable of that type to appear in
            a variable definition context.

Constraint: A <derived-type-spec> shall only appear as an
            instantiation argument if a variable of that type is
            permitted in a variable definition context.

Constraint: A <derived-type-spec> shall only appear as an
            instantiation argument if a variable of that type is
            permitted in an allocate statement.

Constraint: If an <instantiation-arg> is a <type-spec>, it shall not
            specify a type that has a coarray potential subobject
            component.

Constraint: An <instantiation-arg> that is a <generic-spec> or
            <procedure-name> shall correspond to a <deferred-arg> that
            is declared as a <deferred-proc> in the referenced
            template or requirement.

Constraint: An <instantiation-arg> that is a <procedure-name> shall
            have the same characteristics as the corresponding
            <deferred-proc> in the referenced template or requirement.

Constraint: An <instantiation-arg> that is a <generic-spec> shall have
            one specific procedure that has the same characteristics
            as the corresponding <deferred-proc> in the referenced
            template or requirement.

Note: The previous two constraints constitute what is referred to as
      "weak constraints" in other languages.

The <deferred-proc> shall be associated with the specific procedure
that is consistent with the characteristics.

3.2 Syntax for the REQUIREMENT construct
----------------------------------------

A REQUIREMENT is a named collection of deferred argument declarations
intended to facilitate reuse of common patterns within templates and
other requirements.

<requirement>
      <<is>> REQUIREMENT <requirement-name> ( [<deferred-arg-list>] )
                [ <use-stmt> ] ...
                <requirement-specification-construct> ...
             END [REQUIREMENT [<requirement-name>]]

<requirement-specification-construct>
        <<is>> <deferred-arg-decl-construct>
        <<or>> <requirement-interface-body>

Constraint: Each <deferred-arg> shall appear in a
            <requirement-specification-construct>.

Note: A <requirement> is a scoping unit that allows use and host
      association.  Each <deferred-arg> is local to the REQUIREMENT
      construct.

3.2.1 Requirement interface body
--------------------------------

A <requirement-interface-body> declares a <deferred-arg-name> as a
deferred procedure and defines its interface.

<requirement-interface-body>
      <<is>> <function-stmt>
                [ <requirement-interface-specification-part> ]
                <end-function-stmt>
      <<or>> <subroutine-stmt>
                [ <requirement-interface-specification-part> ]
                <end-subroutine-stmt>

Constraint: Each <function-name> and <subroutine-name> in a
            <requirement-interface-body> shall be a
            <deferred-arg-name>.

<requirement-interface-specification-part>
          <<is>> [ <use-stmt> ] ...
                 [ <requirement-interface-declaration-stmt> ] ...

<requirement-interface-declaration-stmt>
          <<is>> <deferred-proc-declaration-stmt>
          <<or>> <requirement-interface-type-declaration-stmt>
          <<or>> <requirement-other-specification-stmt>

<requirement-other-specification-stmt>
        <<is>> <allocatable-stmt>
        <<or>> <asynchronous-stmt>
        <<or>> <codimension-stmt>
        <<or>> <contiguous-stmt>
        <<or>> <dimension-stmt>
        <<or>> <intent-stmt>
        <<or>> <optional-stmt>
        <<or>> <paramter-stmt>
        <<or>> <pointer-stmt>
        <<or>> <target-stmt>
        <<or>> <value-stmt>
        <<or>> <volatile-stmt>

<requirement-interface-type-declaration-stmt>
          <<is>> <declaration-type-spec>
                 [ [ , <requirement-interface-attr-spec> ] ... :: ]
                 <entity-decl-list>

<requirement-interface-attr-spec>
        <<is>> ALLOCATABLE
        <<or>> ASYNCHRONOUS
        <<or>> CODIMENSION <lbracket> <coarray-spec> <rbracket>
        <<or>> CONTIGUOUS
        <<or>> DIMENSION ( <array-spec> )
        <<or>> INTENT ( <intent-spec> )
        <<or>> OPTIONAL
        <<or>> PARAMETER
        <<or>> POINTER
        <<or>> <rank-clause>
        <<or>> TARGET
        <<or>> VALUE
        <<or>> VOLATILE

A <requirement-interface-body> is a scoping unit that has use and host
association.

Note: Unlike <interface-body> of the <interface-block> or
      <template-interface-block>, <requirement-interface-body> allows
      access to host scope entities by default, and does not allow using
      the IMPORT statement.

3.3 Syntax for the REQUIRES statement
-------------------------------------

A REQUIRES statement provides declarations of deferred arguments by
associating them with the deferred arguments of a REQUIREMENT.

<requires-stmt> <<is>>
      REQUIRES [::] <requirement-name>
            ( [<instantiation-arg-spec-list>] )

Constraint: <requirement-name> shall be the name of a previously
            defined <requirement>.

<instantiation-arg-spec> <<is>>
        [ <keyword> = ] <instantiation-arg>

Constraint: Each <keyword> shall be the name of a <deferred-arg> in the
            referenced requirement.


3.4 Syntax for the TEMPLATE construct
-------------------------------------

A template is a set of declarations, specifications and definitions
that are enabled by instantiation.  A TEMPLATE construct defines a
template.  A template is a scoping unit to which use and host
association and template argument association can be applied.  A
template can be defined in the specification section of a program unit
other than a block data program unit.

<template> <<is>> <template-stmt>
                      [ <template-specification-part> ]
                      [ <template-subprogram-part> ]     
                      <end-template-stmt>

<template-stmt> <<is>> TEMPLATE <template-name> ([<deferred-arg-list>])

<end-template-stmt> <<is>>  END [TEMPLATE [<template-name>]]

Constraint: If a <template-name> appears in the <end-template-stmt>,
            it shall be identical to the <template-name>
            specified in the <template-stmt>.

3.4.1 Template specification part
---------------------------------

<template-specification-part> <<is>>
            [ use-stmt ] ...
            [ <template-declaration-construct> ] ...

The implicit mapping within <template> is as if
       IMPLICIT NONE(TYPE,EXTERNAL)
is in place.

<template-declaration-construct> <<is>> <template-specification-construct>
                                 <<or>> <deferred-arg-decl-construct>
                                 <<or>> <requirement>
                                 <<or>> <template>
                                 <<or>> <template-interface-block>

<template-specification-construct> 
                      <<is>> <access-stmt>
                      <<or>> <derived-type-def>
                      <<or>> <dimension-stmt>
                      <<or>> <enum-def>
                      <<or>> <enumeration-type-def>
                      <<or>> <generic-stmt>
                      <<or>> <instantiate-stmt>
                      <<or>> <intrinsic-stmt>
                      <<or>> <parameter-stmt>
                      <<or>> <type-declaration-stmt>

Note: The analogous construct for MODULE is divided into two separate
      constructs: <specific-construct> and
      <other-specification-construct>.  However, subgroup does not see
      the criteria by which items were assigned to either construct.
      Further since TEMPLATE admits fewer items, we have decided to
      merge these two constructs.

Note: A DATA, FORMAT, ENTRY or statement function statement shall not
      appear in the template specification part.

Note: An ALLOCATABLE, ASYNCHRONOUS, BIND, CODIMENSION, CONTIGUOUS,
      EXTERNAL, INTENT, NAMELIST, OPTIONAL, POINTER, PROTECTED, SAVE,
      TARGET, VOLATILE, VALUE, COMMON, or EQUIVALENCE statement shall
      not appear in the template specification part. 


Constraint: An entity declared by <type-declaration-stmt> shall have
            the PARAMETER attribute.

Note: This is to say, the template specification section cannot
      declare variables.

<template-interface-block> <<is>>
       <interface-stmt>
         [ <template-interface-specification> ] ...
         <end-interface-stmt>

<template-interface-specification> <<is>> <interface-body>
                                   <<or>> <template-procedure-stmt>

<template-procedure-stmt> <<is>> PROCEDURE [ :: ] <specific-procedure-list>

Constraint: A <template-procedure-stmt> is allowed only in an
            interface block that has a <generic-spec>.

Constraint: In a <template-interface-block> the MODULE keyword shall
            not appear.

NOTE: Subgroup finds that using "MODULE PROCEDURE" for procedures
      defined in a template to be confusing and unnecessarily verbose.
      Thus, in this context, interfaces should only have "PROCEDURE".


3.4.2 Template subprogram part
------------------------------

<template-subprogram-part> <<is>> <contains-stmt>
                                     [ <template-subprogram> ] ...

<template-subprogram> <<is>> <function-subprogram>
                      <<or>> <subroutine-subprogram>

3.4.3 Additional constraint
---------------------------

Constraint: <template> shall only reference intrinsic procedures,
            procedures with explicit interfaces, and operators.

Note: This constraint expresses the notion of "strong concepts".  In
      particular, this allows a template implementation to be verified
      to be internally consistent.

3.5 Syntax for the INSTANTIATE statement
----------------------------------------

The INSTANTIATE statement specifies an instance of a template
and instantiation arguments that become associated with the deferred
arguments of that template.

<instantiate-stmt>
     <<is>> INSTANTIATE [::] <template-name> (
            [ <instantiation-arg-spec-list> ] ) [, <rename-list> ]
     <<or>> INSTANTIATE [::] <template-name> (
            [ <instantiation-arg-spec-list> ] , ONLY : [ <only-list> ]

<instantiation-arg-spec> <<is>> [ <keyword> = ] <instantiation-arg>

Constraint: Each <keyword> shall be the name of a <deferred-arg> in the
            referenced template.

Constraint: Within an <instantiate-stmt>, <instantiation-arg> shall
            not depend on any entity defined within the referenced
            template.

Note: <generic-spec> includes operators, defined assignment and
      defined I/O.  The last may be somewhat awkward to use within a
      template without re-expressing as defined I/O again.

Constraint: <constant-expr> shall be of type integer, logical or
            character.


4. Other miscellaneous changes
------------------------------

* 10.1.12 Constant expression

  Extend list in normative text for "constant expression":
  "deferred constant"

* 7.3.2.1 Type specifier syntax

  Extend R702 <type-spec>:
  " <<or>> <deferred-type>"

  Extend R703 <declaration-type-spec>:
  "TYPE(<deferred-type>)"

* 7.5.2.1 Syntax of a derived-type definition

  New constraint or R728:
  "<parent-type-name> shall not be a <deferred-type>.

* 15.5.1 Syntax of a procedure reference

  Extend R1522 <procedure-designator>:
  " <<or>> <deferred-proc>"

  Extend R1524 <actual-arg>:
  " <<or>> <deferred-proc> "

===END===


