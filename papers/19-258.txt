To: J3                                                     J3/19-258
From: Van Snyder
Subject: Syntax for conditional form
Date: 2019-October-17
Reference: 18-274

1. Syntax of a conditional form
===============================

Insert the conditional form as an entity of basic syntax, probably
described in a new subclause between 6.2.5 Statement Labels, and 6.2.6
Delimiters, or in clause 9 Use of data objects:

R611a <conditional-form> <<is>>
            IF ( <logical-expr> ) THEN ( <selection> )
            [ ELSE IF ( <logical-expr> ) THEN ( <selection> ) ] ...
            [ ELSE ( <selection> ) ] END IF

R611b <selection> <<is>> <variable>
                  <<or>> <expr>
                  <<or>> <conditional-form>

C602a (R611a) If <conditional-form> is not an actual argument that
      corresponds to an optional dummy argument, or is not a <selection>
      that appears within a <conditional-form> that is an actual argument
      that corresponds to an optional dummy argument, ELSE ( <selection> )
      shall appear.

Insert a list item after (4)(b)(iii) in the description of constant
expressions:

       (4') a <conditional-form> in which every <logical-expr> and every
            <selection> is a constant expression,

Define the variable in several contexts to be a <selection>, with a
constraint that <selection> is <variable> or <conditional-form>, and if
<selection> is <variable> it has the appropriate characterists etc.:

<event-variable>
<team-variable>
<lock-variable>
<stat-variable>
<errmsg-variable>
<internal-file-variable>
NEWUNIT = <scalar-int-variable>
<iomsg-variable>
ID = <scalar-int-variable>
SIZE = <scalar-int-variable>
IOLENGTH = <scalar-int-variable>
<scalar-default-char-variable> in <inquire-spec>
<scalar-logical-variable> in <inquire-spec>
<scalar-int-variable> in <inquire-spec>
<variable> in <input-item-list>

Allow <selection> in <designator>

Replace <expr> and <variable> in <actual-arg> with <selector>

Allow <selection> as the actual argument to PRESENT, in which every
<selection> that is not a <conditional-form> is an optional dummy
argument.

From 18-274 ============================================================

6. Alternative syntax discussion

Firstly, some design principles:

(a) it should be visibly different from function syntax,
    because it is not a function;
(b) it should be visibly different from operator syntax,
    because it is not an operation;
(c) the difference should be "near the front" of the conditional
    expression so as to simplify parsing by computers as
    well as humans;
(d) it should nest unambigously, and any parentheses needed
    should be part of the syntax (otherwise the "variable" case
    cannot be nested);
(e) it should be readable & Fortran-like and not like line noise,
    -- readability is self-evidently desirable.

Both (a) and (b) are desirable because
(i) this does not follow the usual "evaluate the arguments/operands and
    call the function/do the operation",
(ii) we do not want to affect operator priorities, and
(iii) we do not want to invade the user namespace unnecessarily.

Some possible (and some have actually been proposed) examples:

(1) <logical-expr> ? <expr> : <expr>
   satisfies (a)-(c), but not (d) or (e);

(2) (? <logical-expr> : <expr> : <expr> ?)
    satisfies (a)-(d), but not (e);

(3) (? <logical-expr> | <expr> : <expr> ?)
    satisfies (a)-(d), but is even worse on (e);

(4) <logical-expr> .ANDTHEN. <logical-expr>
    <logical-expr> .ORELSE. <logical-expr>
    satisfies (a),(c),(e) but not (b) or (d),
    and only provides short-cut logical conditions, not general selection;

(5) .IF. <logical-expr> .THEN. <expr> .ELSE. <expr> .ENDIF.
    satisfies (a), (b), (d), but not (c) and is weak on (e).

The "line noise" versions (2) and (3) are not definitive.
I chose to put question marks to draw the distinction between
the syntactic grouping (? ... ?) and ordinary parentheses
(which turn variables into expressions).  Other line noise
variations are certainly possible if preferred.

(It should also be noted that line noise does not do missing
optional arguments very well, nor "ELSEIF" style chaining,
so more work would be required if we choose that syntax.)
