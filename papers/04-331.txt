
                                                      J3/04-331

Date:    31 May 2004
To:      J3
From:    Rob James
Subject: Intrinsic assignment and allocatable components

NUMBER: 
TITLE: Intrinsic assignment and allocatable components
KEYWORDS: assignment, allocatable
DEFECT TYPE: 
STATUS: J3 consideration in progress

QUESTION:
Consider the following code:

      type t
        integer, allocatable :: i
      end type
      type(t) :: x
      allocate(x%i)
      x = x
      print *, allocated(x%i)
      end

In the intrinsic assignment, it is unclear whether the value of
the expression on the right-hand side of the assignment should be
determined before the any part of the left-hand side becomes
defined.

Section 7.4.1.3 of Fortran 2003 states:
  The execution of the assignment shall have the same effect as
  if the evaluation of all operations in <expr> and <variable> 
  occurred before any portion of <variable> is defined by the
  assignment.

In this case, there are no operations in <expr>, so this sentence
does not apply.  There doesn't appear to be anything else to 
cover this situation, so it appears that in this case, <expr> 
does not have to be evaluated before any part of <variable> is 
defined.

If x%i becomes deallocated before the <expr> is evaluated, then 
the call to the ALLOCATED intrinsic in this example would return
the value .false.  Was it intended that this program could print 
"F"?

ANSWER:
No.  It was intended that the <expr> in an intrinsic assignment
must be evaluated before any part of the <variable> is defined.
An edit is supplied to correct this oversight.

EDITS:
This edit refers to paper 04-007.
[139:17] Change "the evaluation of all operations in <expr> and
         <variable>" to "the evaluation of <expr> and the 
         evaluation of all expressions in <variable>".

SUBMITTED BY: Rob James

HISTORY: 04-???   m169 Submitted
