To: J3                                                     J3/19-223
Subject: Edits for Conditional form
From: Van Snyder
Date: 2019-September-29
Reference: 18-274

Edits pursuant to specs and syntax in 18-274
============================================

[48:12- 6.2.5 Statement Labels-] Before subclause 6.2.5 Statement Labels,
insert a subclause

"6.2.4a Conditional forms

A conditional form allows to select one of several entities.

R611a <conditional-form> <<is>>
            IF ( <logical-expr> ) THEN ( <selection> )
            [ ELSE IF ( <logical-expr> ) THEN ( <selection> ) ] ...
            [ ELSE ( <selection> ) ] END IF

R611b <selection> <<is>> <variable-name>
                  <<or>> <proc-pointer-name>
                  <<or>> <proc-component-ref>
                  <<or>> <variable>
                  <<or>> <expr>
                  <<or>> <conditional-form>

C602a (R611a) If <conditional-form> is not an actual argument that
      corresponds to an optional dummy argument, or is not a <selection>
      that appears within a <conditional-form> that is an actual argument
      that corresponds to an optional dummy argument, ELSE ( <selection> )
      shall appear.

C602b (R611b) <expr> shall not be <variable>.

{For syntax disambiguation}

R611c <cond-variable-name> <<is>> <selection>

C602c (R611c) Every <selection> within <cond-variable-name> shall be
      <variable-name>.

R611d <cond-proc-pointer-name> <<is>> <selection>

C602d (R611d) Every <selection> within <cond-proc-pointer-name> shall be
      <proc-pointer-name>.

R611e <cond-variable> <<is>> <selection>

C602e (R611e) Every <selection> within <cond-variable> shall be
      <variable>.

R611f <cond-scalar-int-variable> <<is>> <cond-variable>

C602f (R611f) Every <selection> within <cond-scalar-int-variable> shall
      be a <scalar-int-variable>.

R611g <cond-scalar-logical-variable> <<is>> <cond-variable>

C602g (R611g) Every <selection> within <cond-scalar-logical-variable>
      shall be a <scalar-logical-variable>.

C611h <cond-scalar-default-char-variable> <<is>> <cond-variable>

C602h (R611h)  Every <selection> within
      <cond-scalar-default-char-variable> shall be a
      <scalar-default-char-variable>.

R611i <cond-expr> <<is>> <selection>

C602i (R611i) Every <selection> within <cond-expr> shall be <expr>.

R611j <cond-designator> is <conditional-form>

C602j (R611j) Every <selection> in <cond-designator> shall be
      <designator>.

R611k <cond-structure-component> is <selection>

C602k (R611k) Every <selection> in <cond-structure-component> shall be
      a <variable> that is a <structure-component>.

Evaluating a conditional form consists of evaluating the <logical-expr>s
in the order they appear until the value of one is true or all have been
evaluated.  When the value of one is true, the corresponding <selection>
is selected, and no further <logical-expr>s are evaluated. If none is
true, the <selection> in the ELSE ( <selection> ) part, if it appears, is
selected. If ELSE ( <selection> ) part does not appear and no
<logical-expr> is true, no <selection> is selected. If the selected
<selection> is <conditional-form>, the foregoing process is repeated.

The attributes of a conditional form are those of the selected
<selection>, if any is selected.

In a constraint that requires a certain attribute, or one of several
attributes, or prohibits an attribute, the constraint applies to each
<selection> individually. Where normative text requires a certain
attribute, or one of several attributes, or prohibits an attribute, the
requirement applies to each <selection> individually.

NOTE
  For example, in a <scalar-int-variable> that is a <conditional-form>,
  each <variable> in <selection> is required to be a
  <scalar-int-variable>.

[123:9+] Add a right-hand side for <designator>

R901 <designator> <<is>> ...
"                 <<or>> <cond-designator>

[124:1- 9.3 Constants-] Before 9.3 Constants, add a subclause

"
9.2a Selector

A selector is either an expression or a variable.

R907a <selector> <<is>> <cond-selector>

R907b <cond-selector> <<is>> <cond-variable>
                      <<or>> <cond-expr>

If <selector> is <conditional-form>, it allows to select one of several
variables or expressions. As an actual argument that corresponds to an
optional dummy argument, it allows to specify whether an actual argument
is present.

A conditional selector is a variable if and only if every <selector> is a
variable. Otherwise it is an expression.

C907b (R907b) Each <selection> in <cond-selector> shall have the same
      declared type, kind type parameter values, and rank.

C907c (R907b) In a reference to a generic procedure, each <selection> in
      <cond-selector> shall have the same corank, and if any <selection>
      in a <cond-selector> has the ALLOCATABLE or POINTER attribute, each
      <selection> shall have that attribute.

In a constraint that requires a certain attribute, or one of several
attributes, or prohibits an attribute, the constraint applies to each
selection individually. Where normative text requires a certain attribute,
or one of several attributes, or prohibits an attribute, the requirement
applies to each selection individually.

[132:11 R932 9.7.1.1 Form of the ALLOCATE statement]
Replace R929 <errmsg-veriable>

"R929 <errmsg-variable> <<is>> <cond-scalar-default-char-variable>
"

[132:15-16 R932 9.7.1.1 Form of the ALLOCATE statement]

Replace the definition of <allocate-object> with

"R932 <allocate-object> <<is>> <selection>

[132:21 after <allocate-coshape-spec> in 9.7.1.1 Form of the ALLOCATE
statement]  insert a constraint:

"C931b (R932) Every <selection> in <allocate-object> shall be a
       <variable-name> or a <variable> that is a <structure-component>.
"

[136:6-8 R939 9.7.2 NULLIFY statement] Replace
R939 <pointer-object>

"R939 <pointer-object> <<is>> <cond-variable-name>
                       <<or>> <cond-structure-component>
                       <<or>> <cond-proc-pointer-name>

[138:13 9.7.4 STAT specifier] Replace R942 <stat-variable>

"R942 <stat-variable> <<is>> <cond-scalar-int-variable>

[154:12- 10.1.7p2- Evaluation of operands] Insert a paragraph:

If an operand is a conditional form, only the selected <selection> is
evaluated.

[158:29+ 10.1.12 Constant Expression]

Insert a list item after (4)(b)(iii):

"      (4') a <conditional-form> in which every <logical-expr> and every
            <selection> is a constant expression,"

[164:29-30 10.2.2.2 Syntax of the pointer assignment statement]
Replace R1034 <data-pointer-object>

"R1034 <data-pointer-object> <<is>> <selection>

C1014a (R1034) Every <selection> within <data-pointer-object> shall be a
       <variable-name> or a <variable> that is a <structure-component> and
       every <structure component> shall be <scalar-variable %
       <data-pointer-component-name>.
"

[165:21-22 10.2.2.2 Syntax of the pointer assignment statement]
Replace R1038 <proc-pointer-object>

"R1038 <proc-pointer-object> <<is>> <cond-proc-pointer-name>

C1026a (R1038) Every <selection> within <proc-pointer-object> shall be
       <proc-pointer-name> or <proc-component-ref>.
"

[174:13-14 11.1.3.1p1 Purpose and form of the ASSOCIATE construct]

Delete R1105 <selector> because it's replaced above by R907a.

[174:19 11.1.3.1p1 Purpose and form of the ASSOCIATE construct]

Delete C1104 because it's replaced above by C602b.

[180:24 11.1.7.2 Form of the DO construct]
Replace R1124 <do-variable>

"R1124 <do-variable> <<is>> <selection>

 C1120a (R1124) Every <selection> within <do-variable> shall be
        <scalar-int-variable-name>.
"

[204:4-6 11.6.7 EVENT POST statement] Replace R1171 <event variable> and
C1176:

"R1171 <event-variable> <<is>> <selection>

 C1176 (R1171) Every <selection> within <event-variable> shall be a scalar
       variable of type EVENT_TYPE from the intrinsic module
       ISO_FORTRAN_ENV (16.10.2).
"

[205:2 11.6.9 FORM TEAM statement] Replace R1177 <team-variable>

"R1177 <team-variable> <<is>> <cond-scalar-int-variable>
"

[206:5 11.6.10 LOCK and UNLOCK statements] Replace R1182 <lock-variable>
and C1182

"R1182 <lock-variable> <<is>> <selection>

 C1182 (R1182) Every <selection> within  <lock-variable> shall be a scalar
       variable of type LOCK_TYPE from the intrinsic module
       ISO_FORTRAN_ENV (16.10.2).
"

[216:32 12.5.1 Referring to a file] Replace R1203 <internal-file-variable>

"R1203 <internal-file-variable> <<is>> <selection>

 C1200a (R1203) Every  <selection>  within  <internal-file-variable> shall
        be a <char-variable>.
"

[220:11 12.5.6.2 Syntax of the OPEN statement] the NEWUNIT= right-hand
side of R1205 <connect-spec>

"   <<or>> NEWUNIT = <cond-scalar-int-variable>
"

[220:19 12.5.6.2 Syntax of the OPEN statement] Replace R1207
<iomsg-variable>

"R1207 <iomsg-variable> <<is>> <cond-scalar-default-char-variable>
"

[225:15 12.6.2.1 Syntax] Replace the ID= right-hand side of R1213
<io-control-spec>

"   <<or>> ID = <cond-scalar-int-variable>
"

[225:23 12.6.2.1 Syntax] Replace the SIZE= right-hand side of R1213
<io-control-spec>

"   <<or>> SIZE = <cond-scalar-int-variable>
"

[225:24 12.6.2.1 Syntax] Delete R1214 <id-variable> because it's no longer
used

[246:15 12.10.1 Forms of the INQUIRE statement] Replace the IOLENGTH
specifier part of R1230 <inquire-stmt>

"   <<or>> INQUIRE ( IOLENGTH = <cond-scalar-int-variable> ) \smudge
"

[246:23-247:29 12.10.2.1 Syntax] Replace "<scalar-default-char-variable>"
with "<cond-scalar-default-char-variable>" everywhere it appears within
the right-hand side of R1231 <inquire-spec>.

[247:5:17 12.10.2.1 Syntax] Replace "<scalar-logical-variable>" with
"<cond-scalar-logical-variable everywhere it appears within the right-hand
side of R1231 <inquire-spec>.

[247:13-26 12.10.2.1 Syntax] Replace "<scalar-int-variable>" with
"<cond-scalar-int-variable everywhere it appears within the right-hand
side of R1231 <inquire-spec>.

[301:19-20 15.5.1p4 R1524] Replace <expr> | <variable> with <selector>:

"R1524 <actual-arg> <<is>> <selector>"

[301:19-20 15.5.1p4 C1535] Replace C1535, whose only purpose was syntax
disambiguation, which is not needed because R611b <selection> has the same
constraint (C602b).

"C1535 (R1524) Where <actual-arg> is <conditional-form>, each <selection>
       shall conform to the requirements of the corresponding dummy
       argument. "

[302:3+ 15.5.1p4 C1537+] Insert a constraint:

"C1537a (R1524) Where <actual-arg> is <conditional-form>, a <selection>
        that is a coindexed object shall not have a pointer ultimate
        component.
"

[310:30 15.5.2.12 Argument presence and restrictions on arguments not
present]

Remove "or" from the second item in the list, and add a third item:

   o corresponds to a conditional form in which no <selection> is selected,
     or
"

[404:25 16.9.152 PRESENT (A)]

After "PRESENT function appears" append ", or a conditional form in which
every selection is the name of such a dummy argument".

[404:27 16.9.152 PRESENT (A)]

After "A is present (15.5.2.12)" insert ", or if A is a conditional form
in which a selection is selected and the selection is present".

[536:1+ C.4+ Clause 9 notes]

Insert a new subclause

"C.4.1 Conditional forms (9.2a)

Conditional forms have many uses.

Within an expression, one useful application is to select between the
value of an optional argument, and a default value:

{\cf

  myFormat = if ( present ( formatArg ) ) then  &
           & ( "(" // formatArg // ")" ) &
           & else ( "(f10.4)" ) end if

}

The MERGE intrinsic function could not be used for this purpose because
when a function is invoked, all of its argument expressions are evaluated.
If {\cf formatArg} is not present, it cannot be evaluated.

Another application is within the declaration of an automatic variable:

{\cf

  ! We don't need the WORK variable if B is not present:
  real :: Work ( if ( present(b) ) then ( size(b) ) else ( 0 ) end if )

}

Another application is to compute whether actual arguments are present:

{\cf

  call AbsorptionCrossSection ( beta, &
    & if ( wantTemperatureDeriv ) then ( temperatureDeriv ) end if, &
    & if ( wantLineCenterDeriv ) then ( lineCenterDeriv ) end if, &
    & if ( wantDopplerWidthDeriv ) then ( dopplerWidthDeriv ) end if, &
    & if ( wantTempSensitivDeriv) then ( tempSensitivityDeriv) end if )

}

Expressing this statement using an IF construct would require sixteen
<block>s to enumerate all possible combinations of requested derivatives.
