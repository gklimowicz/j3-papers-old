To: J3                                                J3/13-323
From: Dan Nagle
Subject: UK-10.2f Obsolescenting forall
Date: 2013 September 26

Reference: N1975, N1982

Specification: The forall statement and forall block
are made obsolescent.

Syntax: no change, obsolescence only

These edits do three things.  The obsolescent forall.
They move the <<forall-header>> to the do concurrent section.
And they rename the <<forall-header>> to <<concurrent-header>>.
Likewise, <<forall-triplet-spec>>, <<forall-limit>> and
<<forall-step>> are renamed to <<concurrent-triplet-spec>>,
<<concurrent-limit>> and <<concurrent-step>>.

Edits:

{rename <<forall-header>> to <<concurrent-header>>}

[163:30] change "<<forall-header>>" to "<<concurrent-header>>"

[164:26] change "<<forall-header>>" to "<<concurrent-header>>"

[167:7] change "<<forall-header>>" to "<<concurrent-header>>"

[168:7] change "<<forall-header>>" to "<<concurrent-header>>"

[174:11] change "<<forall-header>>" to "<<concurrent-header>>"

[442:32} change "<<forall-header>>" to "<<concurrent-header>>"

{rename <<forall-triplet-spec>> to <<concurrent-triplet-spec>>}

[163:26] change "<<forall-triplet-spec>>"
to "<<concurrent-triplet-spec>>"

[163:31] change "<<forall-triplet-spec-list>>"
to "<<concurrent-triplet-spec-list>>"

[164:1] change "<<forall-triplet-spec>>"
to "<<concurrent-triplet-spec>>"

[164:20-21] change "<<forall-triplet-spec>>"
to "<<concurrent-triplet-spec>>" twice

[165:3] change "<<forall-triplet-spec>>"
to "<<concurrent-triplet-spec>>"

[166:7] change "<<forall-triplet-spec-list>>"
to "<<concurrent-triplet-spec-list>>"

{rename <<forall-limit>> to <<concurrent-limit>>}

[139:7] change "<<forall-limit>>" to "<<concurrent-limit>>"

[164:1] change "<<forall-limit>>" to "<<concurrent-limit>>" twice

[164:2] change "<<forall-limit>>" to "<<concurrent-limit>>"

[165:3] change "<<forall-limit>>" to "<<concurrent-limit>>"

[165:6-7] change "<<forall-limit>>" to "<<concurrent-limit>>" twice

[166:6] change "<<forall-limit>>" to "<<concurrent-limit>>"

{rename <<forall-step>> to <<concurrent-step>>}

[139:7] change "<<forall-step>>" to "<<concurrent-step>>"

[164:1] change "<<forall-stpe>>" to "<<concurrent-step>>"

[164:3] change "<<forall-step>>" to "<<concurrent-step>>"

[165:3] change "<<forall-step>>" to "<<concurrent-step>>"

[165:7-9] change "<<forall-step>>" to "<<concurrent-step>>" twice

[166:6] change "<<forall-step>>" to "<<concurrent-step>>"

{now, move the renamed <<forall-header>> and friends
to the do concurrent section}

[163:31-164:3] move to [174:28+] and renumber as needed

[164:15-21] move to [174:28++] and renumber as needed

{finally, obsolescent forall}

[4:38] make small font "<<forall-construct-stmt>>"

[29:20] make small font "<<forall-construct>>"

[29:40] make small font "<<forall-stmt>>"

[46:1-] in the table, make small font "END FORALL"

[139:7] make small font "a FORALL statement (7.2.4)"

[163:23-168:8] make small font section 7.2.4

[176:21] make small font "FORALL construct (7.2.4.2.2
and 7.2.4.2.3)"

[187:6] make small font "a <<forall-construct-stmt>>,"

[313:9+] make small font in Note 12.49
"FORALL <<assignment-stmt>>" and much later "FORALL statements"

[313:9+] make small font
in Note 12.50 "<<forall-assignment-stmt>>s"

[442:13-14] make small font "FORALL statement" and "FORALL"

[442:30] make small font "FORALL statement or FORALL"

[442:34-35] make small font "FORALL" thrice

[442:37-40] make small font
"FORALL statement, FORALL construct" twice

[442:41] make small font "FORALL"

[453:14-15] make small font "FORALL assignment statement"

[453:16] make small font "FORALL assignment statement"

[454:38] make small font "FORALL"

{add to list of obsolescent features in B.2}
{note that several features may be added to the obsolescent list
 it is the editor's choice which order they appear}

[465:26+] add

"B2.9+ FORALL construct and statement

The FORALL construct and statement were added to the language
in the expectation that they would enable highly efficient
execution, especially on parallel processors.  However,
the experience with them indicates that they are too complex
and have too many restrictions for compilers to take
advantage of them.  They are redundant with the DO CONCURRENT
loop, and may of the manipulations for which they might be used
may be done more efficiently by use of pointers, especially
using pointer rank remapping."
