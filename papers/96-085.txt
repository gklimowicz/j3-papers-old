
                                                     X3J3/96-085

Date:  9-May-1996
To:    X3J3
From:  /jor (Stan Whitlock)
Subj:  JOR Status


67 new JOR items have been submitted for our consideration at next week's
meeting.  You will find the following files on the J3 ftp server:

-rw-------   1 221      10         61832 Oct 30  1995 95-004r1.gz
-rw-------   1 221      10         48418 Oct 30  1995 95-004r1s.gz
-rw-------   1 221      10         43219 May  9 09:13 96-004-new.txt.gz
-rw-------   1 221      10           169 May  9 09:33 96-004.README

The .README says:

    96-004-new.txt contains only JoR items submitted after the issuance of
    95-004r1.  Thus, you will need both 95-004r1 and 96-004-new to have a
    complete list of JoR items.

Remember that 95-004r1s.gz is the subset of the JOR that does not contain the
archived items.  95-004r1 contains items #1 through #82.  96-004-new contain
items #83 through #148.

Many of these JOR items are in J3 papers:

    96-044             contains    # 86 - # 88
    96-046             contains    # 89           see also 96-060
    96-042             contains    # 90 - # 94
    96-049             contains    # 95 - # 98
    96-070             contains    #102 - #108
    96-075 - 96-082    contain     #110 - #116
    96-073             contains    #117 - #126
    96-074             contains    #127 - #148

For your information, the following JOR items were passed at meeting #136 and
now have status "J3 approved;  ready for US TAG" or they were reaffirmed at
meeting #136 and continue to have status "US TAG approved;  ready for WG5":

    3, 17, 18, 34, 44, 58, 60, 66, 75, 86, 88, 89, 91, 93, 94

That status change is not reflected in the 95-004r1 documents named above.

Here is the updated JOR index covering all 148 items:

  LIST OF PROPOSED FORTRAN REQUIREMENTS

  No. Stat Trgt Title
  000 US   2000 Minor Technical Enhancements
  001 Arch      Bit Data Type, Non-string
  002 Reg       Variant Derived Type
| 003 X3J3 2000 Array Components of Array Structures
  004 Sat  1995 FORALL
  005 Arch      DIAGONAL Function
  006 Arch      PROJECT Function
  007 Arch      REPLICATE Function
  008 Arch      RANK Intrinsic Function
  009 Arch      FIRSTLOC and LASTLOC intrinsics
  010 US   2000 Nesting of Internal Procedures
  011 Arch      Internal Procedure Names as Actual Arguments
  012 US   2000 Condition Handling
  013 Sat       Pointer Initialization
  014 Arch      Language Management
  015 US   2000 Conditional Compilation
  016 US   2000 Command Line Arguments and Environmental Variables
| 017 US   2000 Bit Data Type, String
| 018 US   2000 Controlling Pointer Bounds
  019 Reg       Variant Derived Type, Untagged
  020 Sat       User Defined Elemental Functions
  021 Sat       Obsolesce Fixed Source Form
  022 Reg       Keep It Simple, Make It Fine
  023 Sat       User Defined Intrinsic Functions
  024 Sat  1995 Nested WHERE Statements
  025 Sat  1995 Pure User Functions and Subroutines
  026 US   2000 Directives
  027 US   2000 Packaging Implementer Specific Intrinsics in MODULEs
  028 US   Coll Binding to IEEE 754
  029 Arch      Interline Optimization
  030 Reg       Variable Rank Arrays
  031 US   2000 Varying Length Character with Declared Maximum
  032 US   2000 POSIX Binding to Fortran 90
  033 US   2000 Object Oriented Fortran, OOF
| 034 US   2000 Variable Repeat Specifiers in Formats
  035 US   2000 Specifying Default Precisions
  036 Reg       MAXLOC and MINLOC To Accept CHARACTER Arguments
  037 Reg       Argument Passing Mechanism
  038 Reg       Complete Set of Compiler Directives
  039 Reg       SYSTEM Command
  040 Reg       Obtain the Command Line
  041 Reg       Obtain Program Startup Command
  042 Reg       Indexed Files
  043 Reg       OOP Capabilities
| 044 US   2000 Unsigned INTEGER Data Type
  045 Reg       Unicode Character Set Support
  046 Reg       Row Major Arrays
  047 Reg       File Sharing Modes
  048 US   2000 Improve Interoperability between Fortran and ANSI C
  049 X3J3 2000 Generalize Constructors Into Generic Procedures
  050 Reg       Intrinsic and User-defined Specific and Generic Names
  051 Reg       English Words As Function Names
  052 Reg       Extend .EQ. And .NE. To Logical Values
  053 US        Regularize KIND= Arguments Of Intrinsic Functions
  054 Reg       Complete Set of Explicit Attributes
  055 Reg       Array Organization Attributes
  056 Reg       Ranges Specified by Start and Length
  057 Reg       Explicit Scope Identification in References (Extend %)
| 058 US   2000 Regularize Handling of Pointer Arguments
  059 US   2000 Pointers to Procedures
| 060 X3J3 2000 Pointer Association Classes
  061 Reg       Composable FORALL Functionality
  062 Reg       Composable WHERE Facility
  063 Reg       Symmetric Linkage of Argument Attributes
  064 Reg       Symbolic Names for Specification Expressions
  065 Reg       POINTER Objects as Operands
| 066 X3J3 2000 Generic COUNT_RATE Argument for SYSTEM_CLOCK
  067 US   2000 Greater than 7 Array Dimensions
  068 Reg       Generic specification on the END INTERFACE statement
  069 Reg       Intrinsic function CONCAT
  070 Reg       Extended indexing capabilities
  071 Reg       Linear array access
  072 Reg       Intrinsic function REVERSE
  073 Reg       Multi-dimensional transpose
  074 Reg       Spaces should no longer be allowed in names
| 075 US   2000 Remove limitation on statement length
  076 Reg       Need EXPM1 and LOGP1 intrinsics
  077 US   2000 Processor Dependent Features List
  078 Reg       Standardized Handling of Modules
  079 Reg       Asynchronous I/O
  080 US   2000 Asynchronous I/O (proposed HPFF work)
  081 US   2000 PRIVATE and SHARED variables for TASK parallelism
  082 Reg       Interval Arithmetic Support
| 083 Reg       Accessibility Attribute Corresponding to READONLY
| 084 Reg       Make Allocatable Objects More Flexible
| 085 Reg       Separate Accessibility Attributes for Derived Type Components
| 086 X3J3 2000 STREAM I/O
| 087 Reg       Volatile
| 088 X3J3 2000 User specified precedence
| 089 X3J3 2000 Generic pointers
| 090 Reg       Optional "START" Statement
| 091 X3J3 2000 Extend MAX, MIN, etc. to CHARACTER Data Type
| 092 Reg       Permit (LEN=*) for Initialized CHARACTER Variables
| 093 X3J3 2000 Extend Non-advancing I/O to List-Directed I/O
| 094 X3J3 2000 Extend Initialization of COMPLEX Variables
| 095 Reg       Lower Case Syntax Elements
| 096 Reg       Any Kind of Integer for I/O Specifiers
| 097 Reg       Standardized and Unique KIND Numbers
| 098 Reg       Required INTEGER and LOGICAL Kinds
| 099 Reg       Include "Sets" and "Subsets"
| 100 Reg       Implementing an Arbitrary Number of Nested DO Loops
| 101 Reg       Permit BOZ constants in the TRANSFER function
| 102 Reg       Delete Arithmetic IF
| 103 Reg       Delete Non-Block DO Constructs
| 104 Reg       Delete Computed GO TO Statements
| 105 Reg       Delete Fixed Form Source
| 106 Reg       Delete Alternate Return
| 107 Reg       Delete Statement Functions
| 108 Reg       Delete DATA Statements Among Executable Statements
| 109 Reg       Binary stream I/O
| 110 Reg       In-line procedures
| 111 Reg       Local declaration block
| 112 Reg       "Clean up" conformance rules
| 113 Reg       Allow MERGE in constant expressions
| 114 Reg       Extend ALLOCATE to specify non-KIND type parameters
| 115 Reg       Mixed function/subroutine generics
| 116 Reg       "Simultaneous" assignment
| 117 Reg       Use of the SIZE= Keyword
| 118 Reg       Internal File Data Type
| 119 Reg       Internal Files and List-Directed Formatting
| 120 Reg       Named Scratch Files
| 121 Reg       Behavior of OPEN with STATUS="UNKNOWN"
| 122 Reg       Action of STATUS="REPLACE" with Multiple Version Files
| 123 Reg       BACKSPACE with List-Directed and Namelist Formats
| 124 Reg       NEXTREC= Specifier in the INQUIRE Statement
| 125 Reg       ADVANCE="NO" Specifier and Prompting
| 126 Reg       Editorial Changes for Chapter 9
| 127 Reg       CPU_TIME Enhancements
| 128 Reg       $ Character in Symbolic Names
| 129 Reg       Standardized Character Sets Including ASCII
| 130 Reg       TAB Character in Fortran Source
| 131 Reg       BYTE Data Type
| 132 Reg       Automatic or Dynamic Data Objects
| 133 Reg       Piecewise Construction of Named Constant Arrays
| 134 Reg       Period as Derived Type Delimiter
| 135 Reg       Floating Point Operations in Initialization Expressions
| 136 Reg       Indirection and Address Operators and/or Functions
| 137 Reg       BLOCKSIZE= Specifier on OPEN
| 138 Reg       BUFFERCOUNT= Specifier on OPEN
| 139 Reg       CARRIAGECONTROL= Specifier on OPEN
| 140 Reg       INITIALSIZE= and EXTENDSIZE= Specifiers on OPEN
| 141 Reg       ORGANIZATION= Specifier on OPEN
| 142 Reg       RECORDTYPE= Specifier on OPEN
| 143 Reg       USEROPEN= Specifier on OPEN
| 144 Reg       UNLOCK Statement
| 145 Reg       $ and \ Edit Descriptors
| 146 Reg       Q Edit Descriptor (Input Character Count Editing)
| 147 Reg       Field and Record Justification
| 148 Reg       Prohibit Embedded Blanks in Edit Descriptors
