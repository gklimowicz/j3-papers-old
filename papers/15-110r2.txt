                                                             J3/15-110r2
To:        J3
Subject:   Editorial
From:      Van Snyder
Date: 2015 February 09
Reference: 15-007

1. General
----------

The edits proposed here are intended not to alter technical content.

[1:25 1.1p4] Replace "determining" with "specifying".

{The mechanism for "determining" the number of images of a program is
the intrinsic function NUM_IMAGES.}

[24:24-25 1.5p4] Replace "given the EXTERNAL attribute (5.3.9) in its
scope (2.2.1)" with "has the EXTERNAL attribute (5.3.9) where it is
referenced".

{What does "its scope" mean?  The scope of the reference, the scope of
declaration of the name, or the scope of definition of the subprogram?
What if the name is accessed by use or host association, and the name is
given the EXTERNAL attribute in the place from which it is accessed?
What if the name is given the EXTERNAL attribute in some scoping unit
from which it is NOT accessed at the point of reference?}

[26:20 1.6.6p1] Replace "one of the" with "any".

{What if the program uses two of the deleted features?}

[26:36, 39 1.6.7p1] Replace "one of the" with "any".

[26:39 1.6.7p1] Replace "one of these" with "any"

{What if the program uses two of the deleted or processor-dependent
features?}

[106:12 5.5.18p1] Replace "type" with "method", "means", or "variety"
(editor's choice).

{"Type" has a precise meaning in the Fortran standard, which does not
apply here.}

[133:11 6.7.1.3p1] Before "nonallocatable" insert "nonoptional".

{Does this need an interp?}

[305:3 12.5.2.12p1] Append "has the OPTIONAL attribute and"

{Does this need an interp?}

[477:27 16.5.1.3p1] Insert "or declared" after "defined".

{"Defined" covers procedures and types, but not constants and
variables, which use <declaration-type-spec> in their declaration.}

2. <ac-do-variable>
-------------------

There doesn't seem to be a need for the term <ac-do-variable>.  The term
<do-variable> could serve.  In every place it appears, it's context is
sufficiently clear that a distinctive term is not needed.

[87:20 R475] Replace "<ac-do-variable>" with "<do-variable>".

[87:22 R476] Delete R476.

[87:22-23 C4113] Replace "<ac-do-variable>" with "<do-variable>" twice.

[88:3 4.8p5] Replace "<ac-do-variable>" with "<do-variable>".

[88:7 4.8p6] Replace "<ac-do-variable>" with "<do-variable>".

[154:34 7.1.11p2(15)] Replace "an <ac-do-variable>" with "a
<do-variable>".

[156:16 7.1.12p1(12)] Replace "an <ac-do-variable>" with "a
<do-variable>".

[476:7 16.4p1] Replace "an <ac-do-variable>" with "a <do-variable>".

[476:18, 23 16.4p4] Replace "an <ac-do-variable>" with "a <do-variable>"
twice.

3. <data-i-do-variable>
-----------------------

There doesn't seem to be a need for the term <data-i-do-variable>.  The
term <do-variable> could serve.  In every place it appears, it's context
is sufficiently clear that a distinctive term is not needed.

[109:19 R540] Replace "<data-i-do-variable>" with "<do-variable>".

[109:26 R542] Delete R542.

[110:5 C580] Replace "<data-i-do-variable>" with "<do-variable>".

[156:15 7.1.12p2(11)] Replace "<data-i-do-variable>" with
"<do-variable>".

[476:7 16.4p1] Replace "<data-i-do-variable>" with "<do-variable>".

{If both <ac-do-variable> and <data-i-do-variable> are replaced by
<do-variable>, combine the two edits for [476:7], and simplify to "... a
<do-variable> in a DATA statement or array constructor...".}

[476:18 16.4p4] Replace "<data-i-do-variable>" with "<do-variable>".

{If both <ac-do-variable> and <data-i-do-variable> are replaced by
<do-variable>, combine the two edits for [476:8], and simplify to "... a
<do-variable> in a DATA statement or array constructor...".}

[476:18 16.4p4] Replace "<data-i-do-variable>" with "<do-variable>".

{If both <ac-do-variable> and <data-i-do-variable> are replaced by
<do-variable>, combine the two edits for [476:23], and simplify to "...
a <do-variable> of an implied do in in a DATA statement or array
constructor...".}

4. USE and host association and previous declaration or definition
------------------------------------------------------------------

At some places, the standard says "defined previously" or "declared
previously."  At other places it adds "in the [same] scoping unit or
accessed by use or host association."  From the syntax, it seems clear
that something (other than another module procedure) that is accessed by
host association is previously defined or declared.  To avoid clutter
(and have a better chance of getting it right everywhere), add a
sentence to 11.2.2 that says entities accessed by use association are
considered to have been previously defined.  Then clean out the clutter.

[277:2+ 11.2.2p2] At the end of the paragraph, insert a sentence: "A use
associated entity is considered to have been previously defined."

[54:3 4.3.2.2p2] After "entity" insert "other than a component with the
POINTER or ALLOCATABLE attribute".

{Otherwise, this contradicts C445.}

[54:4-5 4.3.2.2p2] Delete "in the scoping ... association".

[104:8-9 5.5.13p2] Replace "in the same ... association" with "defined
previously; it may be defined previously in the same statement" or
"defined previously, perhaps in the same statement".

[110:11 C581] Delete "in the scoping ... association".

[110:20-21 C582] Delete "in the scoping ... association".
