
                                                         J3/01-280

Date:     August 4, 2001
To:       J3
From:     Dick Hendrickson
Subject:  Chapter 4 comments

1)  Page 29, First line after note 4.1.  The forward reference in
"definition is accessible(4.5.1)" seems odd.  It looks associated with
"accessible", but 4.5.1 is the definition syntax.  Delete the reference;
no one at this point will want to skip ahead to see the definition
syntax.

2)  Page 29, 4.1.1, third line.  Add "character" to integer and real and
commatize the list.  There's only 6 types; it seems odd to omit only one
of them from the general blather.

3)  page 30, C401.  Can the type-param-value for a NONkind expression be
a general expression?  Or are nonkinds restricted to : and *?  If so,
rule is awkward.

4)  page 31, second line after note 4.5.  Can't values also be
determined by NONintrinsic assignment?

5)  Page 31, paragraph after note 4.6.  I'm confused about the
difference between deferred ":" and assumed "*" nonkind type
parameters.  The paragraph before 4.6 says deferred get a value from
argument association.  This one says assumed assume the arguments
value.  What's the difference?  Also, does this imply something about
assumed size dummy arguments?  They don't really assume the size of the
actual arguments.  the "assume" a size <= the actual size.

6)  Page 29, 4.1.3, second paragraph, first sentence.  This is said much
better in the third line in the paragraph before note 4.7.  The question
is "agreement" between what.  Also, shape is important.  I think this
was said somewhere else and it bothered me there also.

7)  page 31, R402 etc.  Rules would look better if 402 was moved to
after 407 and 403 was moved to after 405.  The main thing being defined
here is signed-int-literal-constant

8)  Page 33, paragraph before 4.4.2.  This sometimes causes problems,
especially now that we allow BOZ anywhere.  Why not add an optional
_kind to BOZ?  Limit values to the same as for integers.

9)  Page 34, note 4.12  Change "0.45E-4" to "0.45D-4"   completeness
should include double precision

10)  Page 38, section 4.5 4th paragraph.  This cries out for an
example!!!  Given something like
        type   ::  kids
             type (person) ::  oldest_child
             type (person), allocatable  :: other_kids(:)
       end type kids
       type (kids)  ::  my
It seems counterintuitive to me that, e.g..,  my%oldest_child%age is an
ultimate component, but my%other_kids(1)%age isn't.  It's really not
clear here what the utility of "ultimate component" is.

11)  Page 39, C413.  Should we say what happens if it is the same as a
processor defined type?

12)  Page 39, C417 and C418.  These don't appear to be constraints
against the named Rules.  Neither of them allow SEQUENCE as an option.
Should SEQUENCE also be an option in R425?

13)  Page 40, C428 and C429.  Are we being too clever with the words
"previously defined" and "accessible"?  Normally I think of "accessible"
as meaning defined (before) here and/or brought in from a module or host
association.  In C429 we seem to mean defined before or after here to
allow for recursive types.  Maybe a NOTE would help here.

14)  Page 40, C432.  I thought purpose of nonkind parameters was to
allow them to be used in dimensions?

15)  Page 40, C435.  I don't see how this applies to the named rule.
Where would the type-param-value be?

16)  Page 40.  C535, C501 seems similar to C435, but doesn't contain the
restrictions about constants, etc.  Why?

17)  Page 41, R438 and R439,  Wouldn't this be clear if we put [PRIVATE]
as the second line of the rule and dropped R439?

18)  Page 41, R438.  Why do we only allow PRIVATE, I think everywhere
else we allow both PUBLIC or PRIVATE.  Especially a problem since we
allow mixed modes and the PUBLIC or PRIVATE from above doesn't propagate
down.  Even if redundant, it's good for documentation.

19)  Page 42, C460.  It's unclear at first reading how the "an
accessible" propagates past the "or".  Change
"or" to "or an" to clarify it.

20)  Page 42, C461.  Is "passed-object" a defined term?  I'm sure I know
what it means, but would it be better to append this constraint onto the
end of the previous with a lead in phrase like "Such dummy argument
must..."?  it's defined in 4.5.1.6;  I'm not sure about what should
happen to dummy arguments that are both kind and nonkind

21)  Page 43, 4.5.1.1, 4th line.  What is "the exception stated below"?
I didn't see one.  Also, the third line from the end of 42 uses
"described below".  This is too many vague forward references.

22)  Page 43, note 4.22, first example.  I'd add at the end of the text
"D does not have the KIND attribute", or "D has the nonkind attribute.
I'd also like to see an example where a thing is used both as a kind and
nonkind parameter for completeness.

23)  Page 43, 4.5.1.1, paragraph before note 4.23.  This is a hard to
parse sentence and a strange requirement.  Wouldn't it be better to
REQUIRE KIND or NONKIND for everything and not try to make them be
implicit?  Or say every parameter is implicit INTEGER,KIND unless it's
explicitly type by the user?  The idea of magic context sensitive
defaults seems hard to describe.

24)  Page 43, 4.5.1.1, note 4.23.  I'm not clear about what happens if
one type has a non-kind type parameter.  Something like
      type t1(a)
      integer, kind ::  a
      type (t2(a)), pointer ::  comp
      end type t1
      type t2(a)
         real array(a)
      end t2
Is this OK?
Is the "integer, kind::a" required if there is a "real(a)  ::  scalar"
statement in the definition of t1?  Does it matter if it comes before or
after the line for comp?

25)  Page 44, 4.5.1.2  Notes 4.24 and 4.25 should be combined into one
note since the second refers to the first.

26)  Page 44, 4.5.1.2.  First paragraph and allocatable components.  As
I understand it, you can't specify default initialization for an
allocatable component array.  Is that right?  If so, it should be
mentioned here since this is where people will look for info on default
initialization.

The prohibition on default initialization of allocatable components
seems odd.  I can have an allocatable array of a derived type that has
default initialization for it's components.  Why shouldn't we be able to
initialize the allocatable components?  At least to a scalar?

27)  Page 45, note 4.27.  I spent a lot of time trying to figure out how
coord(:1) got initialized to contain (/ X1, Y1/).  Remove the comments
following the !'s in the type and change "COORD" to "END_POINTS".  Let
the reader guess which dimension is x/y and which is the point
number--it doesn't matter.

If not, then line up the !'s for neatness

28)  Page 45, Note 4.28.  Why isn't the shape also determined for array
variables of type STACK?

How does argument association determine the size?  Isn't that an odd way
to say it?  Is this a new part of OOP?  I think it's an odd thing to say
since an argument might be unallocated and hence not have a shape.

29)  Page 46, Note 4.29  C436 says we can't initialize allocatable
components.  If that's what we intend, it needs to be said here,
especially since the previous example had an allocatable component
array.

30)  Page 46, note 4.30.  It's odd to say 4 components plus a pointer.
That, to me, implies that the pointer isn't a component.  Better to say
"5 components, one of which is a pointer..."

Also, the sentence "the size of the target array will be determined by
the size of the abstract" should be deleted.  It's wrong and it implies
some form of magic that doesn't happen.  The last sentence says how the
size gets determined.  If I do
  my_thesis%abstract = "a lot of really interesting stuff about rocket
science..."
that doesn't determine the size of the array!

Also, the def of ABSTRACT is unusual.  I wouldn't expect to use a
character array to hold a text thing like an abstract because there's no
easy way to initialize it.

31)  Page 47, note 4.32  The phrase "same module" has no antecedent.  At
least add something like "declared in a module" to the first line, or
better add a module name and a contains.

32)  Page 47, note 4.33  This sounds like normative text to me.  I
couldn't deduce the last sentence from reading 16.1.2.4.4.  Does it mean
that an ERR= branch must be taken?

33)  Page 48, note 4.37.  The following notes should include examples of
all 4 combinations along with some text describing how they would be
used.

34)  Page 49, 4.5.1.8 SEQUENCE.  Where do we say what SEQUENCE does?
Also, should put a sentence at the end of the long note something like
"A SEQUENCE statement forces the processor to assign storage to elements
in the same order as they are declared.  This might cause
inefficiencies, such as data misalignment, but may be useful for
interchanging data with non Fortran processors.

35)  Page 49, 4.5.1.9.  I don't understand the term "might".  I couldn't
see anything in 4.5.10 that made it look like it was optional or
whatever.

36)  Page 50, last sentence before note 4.45.  Does this sentence add
anything?  I think it just restates the previous two.

37)  Page 52, notes 4.49 and 4.51.  These look awfully normative to me.
Are they deducible from constraints, etc?

38)  Page 52, note 4.52.  I think an example showing a reference to
POINT, COLOR and X would help.

39)  Page 52 and 53, notes 4.52 and 4.53.  I'm confused here about what
the components are named in an extended type.  If I do
     TYPE (COLOR_POINT)  :: pixel
then can I do
PIXEL%X= 3
or must I do
PIXEL%POINT%X = 3?
Can I do
PIXEL%POINT = POINT(3,4)

40)  Page 53, last sentence in 4.5.3.  Can it be extended generically?

41)  Page 54, R448  Are there no constraints that the parameter value
must be in initialization expression or whatever?  Also, it should be an
integer since I think parameters are only integer.

42)  Page 54, 4.5.7  Can type-alias be declared with a parameter spec
list?  It wasn't obvious to me from looking at the type alias syntax or
the examples.  It's now obvious, beginning of ch 5 uses BNF from
beginning of  4.5 and 4.7.

43)  Page 54, C475  I don't understand this constraint.

44)  Page 55, note 4.54  I don't understand this either.  What about the
form "name(...)(...)"
where "name(...)" is a generic looking thing.  Is that what C475 is
trying to prevent?

45)  Page 55, sentence before note 4.55.  I don't understand this
sentence.  The last line in the example in 4.55 does specify parent
components even though the lead in text says no parent components appear
in component order.

46)  Page 55, sentence between notes 4.55 and 4.56.  Does this mean we
can't initialize mutually recursive derived types?  Or maybe even
recursive ones?

47)  Page 56, 4.5.10  I don't understand the finalization process.  It
looks like the first thing that happens is that a FINAL routine is
called with the entity as the argument.  Then final routines are called
on a component by component basis.  I would think that a FINAL routine
would clean up the whole thing.  In effect, the final routine for the
entity deletes the entity, or returns all of it's storage, etc.  But
this can't happen this way here.

48)  Page 56, 4.5.10 (2).  This seems to contradict (1).  Are the
components finalized first?  Also, if the thing is an array, why are the
elements finalized separately, why not allow for elemental as in (1)

49)  Page 56, 4.5.10 (2).  Does this imply recursive finalization if a
component is a pointer to a thing of the same type?  What about mutual
recursion where PARENT points to KID and KID points to PARENT?

50)  Page 57, finalization, 2nd and 3rd paragraphs.  The requirements
are unclear to me.  In
10 continue
  ...
      DO i = 1,100
          w(i) = finalizable_function(...)
          x(i) = finalizable_function(...)
         if (...) go to 10
          y(i) = finalizable_struct_constructor(...)
        if (...) z(i) = finalizable_struct_constructor(...)
     enddo
the things are only finalized once at loop exit, not in between
references?  Does the processor have to trap the GOTO and do the
finalization just before it jumps out of the loop?  For the if
controlled assignment the processor will have to remember if the
assignment actually took place?  Also, the word construct distinguishes
between an IF statement as above and an IF-ENDIF block.  So presumable
if the if were replaced with
        if(...) then
          z(i) = finalizable_struct_constructor(...)
       endif
that constructor would be frequently finalized.

51)  Page 58, note 4.62.  Add an example of a type with parameters

52)  Page 59, note 4.63.  Should the last sentence be "NOT
interoperatable"?
In either case, shouldn't this be normative text?

53)  Page 60, R459.   What is the use of the first form?  Is something
missing?

54)  Page 61, line before note 4.68.  How do you form an empty list?
Does this just apply to implied do's?  The syntax rules do not allow [
] as a zero sized array, although they might allow  [integer::]

55)  Page 61, examples.  Need one with a type spec.  maybe the simple
one with dim from earlier will work.
