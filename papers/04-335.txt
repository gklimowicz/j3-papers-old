
                                                      J3/04-335

Date:    10 June 2004
To:      J3
From:    Rob James
Subject: Unlimited polymorphic pointer/allocatable dummy arguments

NUMBER:
TITLE: Unlimited polymorphic pointer/allocatable dummy arguments
KEYWORDS: polymorphism, POINTER, ALLOCATABLE, argument
DEFECT TYPE:
STATUS: J3 consideration in progress

QUESTION:
Consider the following program:
      module m
        type t
          integer i
        end type
      contains
        subroutine s (x)
          class (*), pointer, intent(inout) :: x
        end subroutine
      end module

      program p
        use m
        class (*), pointer :: up
        class (t), pointer :: lp
        call s (lp)
        call s (up)
      end program

Section 12.4.1.2 states:

    If a dummy argument is allocatable or a pointer, the associated
    actual argument shall be polymorphic if and only if the dummy
    argument is polymorphic, and the declared type of the actual
    argument shall be the same as the declared type of the dummy
    argument.

Section 5.1.1.2 states:

    An object declared with the CLASS(*) specifier is an unlimited
    polymorphic object. An unlimited polymorphic entity is not
    declared to have a type. It is not considered to have the same
    declared type as any other entity, including another unlimited
    polymorphic entity.

Taken together, these two statements seem to imply that no unlimited
polymorphic dummy argument that has the ALLOCATABLE or POINTER
attribute can be associated with any actual argument.

Are either of the procedure calls in the given example
standard-conforming?

ANSWER:
The first procedure call is not standard-conforming.  The second
procedure call was intended to be standard-conforming.  Edits are
provided to correct this oversight.

EDITS:
All edits refer to 04-007.
[268:23] Before "the declared", insert "either both the actual and
         dummy argument shall be unlimited polymorphic, or".

SUBMITTED BY: Rob James

HISTORY: 04-335   m169 Submitted
