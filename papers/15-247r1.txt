                                                            J3/15-247r1
To: J3
From: Malcolm Cohen
Subject: Matters arising from the editor's report, and more
Date: 2015 October 14


1. Introduction

This paper responds to the comments in the editor's report and provides
edits to address the issues identified.

It also contains some additional editsarising from meeting discussion for:
(a) the wording (and hyperlinking) of references to named constants from
    intrinsic modules;
(b) indexing of "pointer association context" (and a typo fixup);
(c) ACQUIRED_LOCK= specifier indexing;
(d) correcting cross-references to defined terms.


2. Comments and responses

COMMENT: \si{derived-type-stmt} is not indexed as being any kind of
         statement.  It should probably be indexed either as a
         "derived type statement" or "derived type definition statement".

-->Recommend "derived type definition statement".

(re 5.5.2p3)
COMMENT: Maybe the "Identifiers ..." sentences should be reworded to be in
         the singular.

-->Yes.  Also, "in that module" is problematic - there is no unambiguous
   antecedent.  Actually the whole paragraph is hopelessly confusing, as
   it has not been adequately changed to reflect the new multiple
   default accessibility situation.

COMMENT: 15.3.7 item (5) has 2 occurrences of CFI_cdesc_t in code font,
         but all other non-example occurrences are in normal font.
         We should make this consistent.

-->Change to normal font.

COMMENT: I note "non-negative" is used a few times, though we mostly use
         "nonnegative".  This should be fixed.

-->Use "nonnegative" (I don't like it myself, but it's our style).

COMMENT: In 13.8.71 EVENT_QUERY, maybe "shall be scalar and of type
         EVENT_TYPE from the intrinsic module ISO_FORTRAN_ENV", just
         "shall be an event variable", since we have the defined
         term?  Or even "shall be a nonindexed event variable"?
         (NB event variable => scalar already).
-->Yes.
COMMENT: If we don't do that, then EVENT_QUERY(EVENT_TYPE(),COUNT) would
         be valid.  I do not think that is a good idea.
-->Quite so.

COMMENT: The constraints on event variables allow them to be passed to
         procedures with implicit interfaces.  I guess that is ok.
-->Ugh.  Ok.

COMMENT: Missing entry in "Events that cause variables to become defined"
-->Add entry.


3. Edits to 15-007r2

[throughout] Search for "derived type statement" and "derived-type-stmt",
             and index as "derived type definition statement" and
             "statement!derived type definition" if relevant.

[throughout] Change every occurrence of "non-negative" to "nonnegative".

[throughout] Standardise the wording of references to named constants such
             as ATOMIC_INT_KIND from the intrinsic module ISO_FORTRAN_ENV:
  e.g. with ref:
    "ATOMIC_INT_KIND from the intrinsic module ISO_FORTRAN_ENV
     (\ref{D13:ATOMIC_INT_KIND})"
  e.g. without ref
    "ATOMIC_INT_KIND from the intrinsic module ISO_FORTRAN_ENV".
  Also, hyperlink the named constant to its subclause,
  and the intrinsic module to its subclause,
  and if relevant index the named constant.
{I did this for types LOCK_TYPE etc. previously; the named constants also
 warrant attention.}

[throughout] Index "pointer association context"; index the definition in
             clause 16 as a definition.

[throughout?] Hyperlink the "ACQUIRED_LOCK=" specifier; there is one
              occurrence at [500:11] (in 16.6.7).

[throughout] Correct the cross-references to defined terms, e.g. in 16.1
             (this is actually a mistake in the \term macro, it needs
             to use "\refstepcounter" instead of "\addtocounter").

[63:16] Index "derived type definition statement" as a definition.

[92:11-15] 5.5.2 Accessibility attribute, p3, replace entire paragraph
           (beginning "Identifiers...") with the following:
  "An identifier that is specified in a module or is accessible in a
   module by use association has either the PUBLIC attribute or PRIVATE
   attribute.  An identifier whose accessibility is not explicitly
   specified and that is declared in the module has the
   default accessibility for that module (\ref{D5:Accessibility
   statement}).  An identifier that is not declared in the module but
   which is accessible by use association is PRIVATE if and only if the
   default accessibility for each module via which it is accessed is
   PRIVATE, and PUBLIC otherwise."

   The default accessibility attribute for a module is PUBLIC unless it has
   been changed by a PRIVATE statement.  Only an identifier that has
   the PUBLIC attribute in that module is available to be accessed from
   that module by use association."

[359:15] 13.8.71 EVENT_QUERY (EVENT, COUNT [, STAT]),
         "shall be scalar ... ISO_FORTRAN_ENV"
         ->"shall be an event variable (\ref{D13:EVENT_TYPE})".
{Actually the reference is unnecessary since "event variable" is a defined
 term, but it might be useful to a paper copy user.}

[461:19,21] 15.3.7 Interoperability of procedures and procedure interfaces,
            item (5),
            Set "CFI_cdesc_t" in normal font (not code font), twice.

[495:27+] 16.6.5 Events that cause variables to become defined,
          after item (31), insert new item
 "(32) Successful execution of an EVENT POST or EVENT WAIT statement causes
       the event variable to become defined."

[500:16] 16.6.8 Pointer association context, p1,
         insert space after comma before "5.5.10",
         insert reference to 12.7 (Pure procedures).

===END===
